//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace myRequirements.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int UserIDField;
        
        private string FullnameField;
        
        private string UsernameField;
        
        private string PasswordField;
        
        private string EmailField;
        
        private string CountryField;
        
        private System.Nullable<System.DateTime> LoggedInTimeField;
        
        private System.Nullable<System.DateTime> CreatedTimeField;
        
        private System.Nullable<int> PrimaryProjectField;
        
        private System.Nullable<int> UserlevelField;
        
        private System.Nullable<bool> ActiveField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> ProjectsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.Nullable<System.DateTime> LoggedInTime {
            get {
                return this.LoggedInTimeField;
            }
            set {
                if ((this.LoggedInTimeField.Equals(value) != true)) {
                    this.LoggedInTimeField = value;
                    this.RaisePropertyChanged("LoggedInTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.Nullable<System.DateTime> CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((this.CreatedTimeField.Equals(value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public System.Nullable<int> PrimaryProject {
            get {
                return this.PrimaryProjectField;
            }
            set {
                if ((this.PrimaryProjectField.Equals(value) != true)) {
                    this.PrimaryProjectField = value;
                    this.RaisePropertyChanged("PrimaryProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public System.Nullable<int> Userlevel {
            get {
                return this.UserlevelField;
            }
            set {
                if ((this.UserlevelField.Equals(value) != true)) {
                    this.UserlevelField = value;
                    this.RaisePropertyChanged("Userlevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.Nullable<bool> Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirements {
            get {
                return this.PrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateRequirementsField, value) != true)) {
                    this.PrivateRequirementsField = value;
                    this.RaisePropertyChanged("PrivateRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class PrivateRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PrivateRequirementsIDField;
        
        private string NameField;
        
        private string AliasesField;
        
        private string DescriptionField;
        
        private string ProblemField;
        
        private string CommonAttacksField;
        
        private string SolutionField;
        
        private string IssuesField;
        
        private string TradeOffsField;
        
        private string RelatedPatternsField;
        
        private System.Nullable<int> SelectedExampleField;
        
        private System.Nullable<int> RequirementIDField;
        
        private System.Nullable<int> UserIDField;
        
        private System.Nullable<int> PriorityField;
        
        private System.Nullable<bool> SuggestAsPublicField;
        
        private string DomainField;
        
        private string ReferencesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoriePrivateSecurityRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainPrivateRequirement> RelationDomainPrivateRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateRequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateRequirementsID {
            get {
                return this.PrivateRequirementsIDField;
            }
            set {
                if ((this.PrivateRequirementsIDField.Equals(value) != true)) {
                    this.PrivateRequirementsIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementsID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Aliases {
            get {
                return this.AliasesField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasesField, value) != true)) {
                    this.AliasesField = value;
                    this.RaisePropertyChanged("Aliases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Problem {
            get {
                return this.ProblemField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemField, value) != true)) {
                    this.ProblemField = value;
                    this.RaisePropertyChanged("Problem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string CommonAttacks {
            get {
                return this.CommonAttacksField;
            }
            set {
                if ((object.ReferenceEquals(this.CommonAttacksField, value) != true)) {
                    this.CommonAttacksField = value;
                    this.RaisePropertyChanged("CommonAttacks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Solution {
            get {
                return this.SolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.SolutionField, value) != true)) {
                    this.SolutionField = value;
                    this.RaisePropertyChanged("Solution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Issues {
            get {
                return this.IssuesField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuesField, value) != true)) {
                    this.IssuesField = value;
                    this.RaisePropertyChanged("Issues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string TradeOffs {
            get {
                return this.TradeOffsField;
            }
            set {
                if ((object.ReferenceEquals(this.TradeOffsField, value) != true)) {
                    this.TradeOffsField = value;
                    this.RaisePropertyChanged("TradeOffs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string RelatedPatterns {
            get {
                return this.RelatedPatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedPatternsField, value) != true)) {
                    this.RelatedPatternsField = value;
                    this.RaisePropertyChanged("RelatedPatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.Nullable<int> SelectedExample {
            get {
                return this.SelectedExampleField;
            }
            set {
                if ((this.SelectedExampleField.Equals(value) != true)) {
                    this.SelectedExampleField = value;
                    this.RaisePropertyChanged("SelectedExample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public System.Nullable<int> RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public System.Nullable<int> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public System.Nullable<int> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public System.Nullable<bool> SuggestAsPublic {
            get {
                return this.SuggestAsPublicField;
            }
            set {
                if ((this.SuggestAsPublicField.Equals(value) != true)) {
                    this.SuggestAsPublicField = value;
                    this.RaisePropertyChanged("SuggestAsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public string References {
            get {
                return this.ReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencesField, value) != true)) {
                    this.ReferencesField = value;
                    this.RaisePropertyChanged("References");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=17)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=18)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoriePrivateSecurityRequirements {
            get {
                return this.RelationCategoriePrivateSecurityRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoriePrivateSecurityRequirementsField, value) != true)) {
                    this.RelationCategoriePrivateSecurityRequirementsField = value;
                    this.RaisePropertyChanged("RelationCategoriePrivateSecurityRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=19)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainPrivateRequirement> RelationDomainPrivateRequirements {
            get {
                return this.RelationDomainPrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationDomainPrivateRequirementsField, value) != true)) {
                    this.RelationDomainPrivateRequirementsField = value;
                    this.RaisePropertyChanged("RelationDomainPrivateRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=20)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateRequirements {
            get {
                return this.RelationPatternPrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternPrivateRequirementsField, value) != true)) {
                    this.RelationPatternPrivateRequirementsField = value;
                    this.RaisePropertyChanged("RelationPatternPrivateRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=21)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateRequirements {
            get {
                return this.RelationProjectPrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationProjectPrivateRequirementsField, value) != true)) {
                    this.RelationProjectPrivateRequirementsField = value;
                    this.RaisePropertyChanged("RelationProjectPrivateRequirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class Project : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ProjectIDField;
        
        private string NameField;
        
        private string DescriptionField;
        
        private System.Nullable<int> UserIDField;
        
        private System.Nullable<bool> isPrimaryProjectField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateRequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<int> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<bool> isPrimaryProject {
            get {
                return this.isPrimaryProjectField;
            }
            set {
                if ((this.isPrimaryProjectField.Equals(value) != true)) {
                    this.isPrimaryProjectField = value;
                    this.RaisePropertyChanged("isPrimaryProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateRequirements {
            get {
                return this.RelationProjectPrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationProjectPrivateRequirementsField, value) != true)) {
                    this.RelationProjectPrivateRequirementsField = value;
                    this.RaisePropertyChanged("RelationProjectPrivateRequirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Example", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class Example : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ExampleIDField;
        
        private System.Nullable<int> RequirementIDField;
        
        private System.Nullable<int> PrivateRequirementIDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExampleID {
            get {
                return this.ExampleIDField;
            }
            set {
                if ((this.ExampleIDField.Equals(value) != true)) {
                    this.ExampleIDField = value;
                    this.RaisePropertyChanged("ExampleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Nullable<int> PrivateRequirementID {
            get {
                return this.PrivateRequirementIDField;
            }
            set {
                if ((this.PrivateRequirementIDField.Equals(value) != true)) {
                    this.PrivateRequirementIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationCategoriePrivateSecurityRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationCategoriePrivateSecurityRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PrivateRequirementIDField;
        
        private int CategorieIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateRequirementID {
            get {
                return this.PrivateRequirementIDField;
            }
            set {
                if ((this.PrivateRequirementIDField.Equals(value) != true)) {
                    this.PrivateRequirementIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int CategorieID {
            get {
                return this.CategorieIDField;
            }
            set {
                if ((this.CategorieIDField.Equals(value) != true)) {
                    this.CategorieIDField = value;
                    this.RaisePropertyChanged("CategorieID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationDomainPrivateRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationDomainPrivateRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DomainIDField;
        
        private int PrivateRequirementIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainID {
            get {
                return this.DomainIDField;
            }
            set {
                if ((this.DomainIDField.Equals(value) != true)) {
                    this.DomainIDField = value;
                    this.RaisePropertyChanged("DomainID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateRequirementID {
            get {
                return this.PrivateRequirementIDField;
            }
            set {
                if ((this.PrivateRequirementIDField.Equals(value) != true)) {
                    this.PrivateRequirementIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationPatternPrivateRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationPatternPrivateRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PrivateRequirementIDField;
        
        private int PatternIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateRequirementID {
            get {
                return this.PrivateRequirementIDField;
            }
            set {
                if ((this.PrivateRequirementIDField.Equals(value) != true)) {
                    this.PrivateRequirementIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int PatternID {
            get {
                return this.PatternIDField;
            }
            set {
                if ((this.PatternIDField.Equals(value) != true)) {
                    this.PatternIDField = value;
                    this.RaisePropertyChanged("PatternID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationProjectPrivateRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationProjectPrivateRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ProjectIDField;
        
        private int PrivateRequirementIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int PrivateRequirementID {
            get {
                return this.PrivateRequirementIDField;
            }
            set {
                if ((this.PrivateRequirementIDField.Equals(value) != true)) {
                    this.PrivateRequirementIDField = value;
                    this.RaisePropertyChanged("PrivateRequirementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Requirment_PatternsAndCategoriesAndExamples", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class Requirment_PatternsAndCategoriesAndExamples : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> CategoriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> PatternsField;
        
        private myRequirements.ServiceReference1.Requirement RequirementField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> Patterns {
            get {
                return this.PatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternsField, value) != true)) {
                    this.PatternsField = value;
                    this.RaisePropertyChanged("Patterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public myRequirements.ServiceReference1.Requirement Requirement {
            get {
                return this.RequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementField, value) != true)) {
                    this.RequirementField = value;
                    this.RaisePropertyChanged("Requirement");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Requirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class Requirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RequirementIDField;
        
        private string NameField;
        
        private string AliasesField;
        
        private string DescriptionField;
        
        private string ProblemField;
        
        private string CommonAttacksField;
        
        private string SolutionField;
        
        private string IssuesField;
        
        private string TradeoffsField;
        
        private string RelatedPatternsField;
        
        private string ReferencesTextField;
        
        private string DomainField;
        
        private string ReferencesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategorieRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainRequirement> RelationDomainRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Aliases {
            get {
                return this.AliasesField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasesField, value) != true)) {
                    this.AliasesField = value;
                    this.RaisePropertyChanged("Aliases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Problem {
            get {
                return this.ProblemField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemField, value) != true)) {
                    this.ProblemField = value;
                    this.RaisePropertyChanged("Problem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string CommonAttacks {
            get {
                return this.CommonAttacksField;
            }
            set {
                if ((object.ReferenceEquals(this.CommonAttacksField, value) != true)) {
                    this.CommonAttacksField = value;
                    this.RaisePropertyChanged("CommonAttacks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Solution {
            get {
                return this.SolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.SolutionField, value) != true)) {
                    this.SolutionField = value;
                    this.RaisePropertyChanged("Solution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Issues {
            get {
                return this.IssuesField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuesField, value) != true)) {
                    this.IssuesField = value;
                    this.RaisePropertyChanged("Issues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Tradeoffs {
            get {
                return this.TradeoffsField;
            }
            set {
                if ((object.ReferenceEquals(this.TradeoffsField, value) != true)) {
                    this.TradeoffsField = value;
                    this.RaisePropertyChanged("Tradeoffs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string RelatedPatterns {
            get {
                return this.RelatedPatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedPatternsField, value) != true)) {
                    this.RelatedPatternsField = value;
                    this.RaisePropertyChanged("RelatedPatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string ReferencesText {
            get {
                return this.ReferencesTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencesTextField, value) != true)) {
                    this.ReferencesTextField = value;
                    this.RaisePropertyChanged("ReferencesText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string References {
            get {
                return this.ReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencesField, value) != true)) {
                    this.ReferencesField = value;
                    this.RaisePropertyChanged("References");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=13)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=14)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirements {
            get {
                return this.PrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateRequirementsField, value) != true)) {
                    this.PrivateRequirementsField = value;
                    this.RaisePropertyChanged("PrivateRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=15)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategorieRequirements {
            get {
                return this.RelationCategorieRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategorieRequirementsField, value) != true)) {
                    this.RelationCategorieRequirementsField = value;
                    this.RaisePropertyChanged("RelationCategorieRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=16)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainRequirement> RelationDomainRequirements {
            get {
                return this.RelationDomainRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationDomainRequirementsField, value) != true)) {
                    this.RelationDomainRequirementsField = value;
                    this.RaisePropertyChanged("RelationDomainRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=17)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirements {
            get {
                return this.RelationPatternRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternRequirementsField, value) != true)) {
                    this.RelationPatternRequirementsField = value;
                    this.RaisePropertyChanged("RelationPatternRequirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Categorie", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class Categorie : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string DescriptionField;
        
        private int CategorieIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoriePatternsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoriePrivateSecurityRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategorieRequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int CategorieID {
            get {
                return this.CategorieIDField;
            }
            set {
                if ((this.CategorieIDField.Equals(value) != true)) {
                    this.CategorieIDField = value;
                    this.RaisePropertyChanged("CategorieID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoriePatterns {
            get {
                return this.RelationCategoriePatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoriePatternsField, value) != true)) {
                    this.RelationCategoriePatternsField = value;
                    this.RaisePropertyChanged("RelationCategoriePatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoriePrivateSecurityRequirements {
            get {
                return this.RelationCategoriePrivateSecurityRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoriePrivateSecurityRequirementsField, value) != true)) {
                    this.RelationCategoriePrivateSecurityRequirementsField = value;
                    this.RaisePropertyChanged("RelationCategoriePrivateSecurityRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategorieRequirements {
            get {
                return this.RelationCategorieRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategorieRequirementsField, value) != true)) {
                    this.RelationCategorieRequirementsField = value;
                    this.RaisePropertyChanged("RelationCategorieRequirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pattern", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class Pattern : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PatternIDField;
        
        private string NameField;
        
        private string AliasesField;
        
        private string DescriptionField;
        
        private string ProblemField;
        
        private string CommonAttacksField;
        
        private string SolutionField;
        
        private string ExamplesField;
        
        private string TradeoffsField;
        
        private string RelatedPatternsField;
        
        private string ReferencesField;
        
        private string DomainField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoriePatternsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainPattern> RelationDomainPatternsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatternID {
            get {
                return this.PatternIDField;
            }
            set {
                if ((this.PatternIDField.Equals(value) != true)) {
                    this.PatternIDField = value;
                    this.RaisePropertyChanged("PatternID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Aliases {
            get {
                return this.AliasesField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasesField, value) != true)) {
                    this.AliasesField = value;
                    this.RaisePropertyChanged("Aliases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Problem {
            get {
                return this.ProblemField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemField, value) != true)) {
                    this.ProblemField = value;
                    this.RaisePropertyChanged("Problem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string CommonAttacks {
            get {
                return this.CommonAttacksField;
            }
            set {
                if ((object.ReferenceEquals(this.CommonAttacksField, value) != true)) {
                    this.CommonAttacksField = value;
                    this.RaisePropertyChanged("CommonAttacks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Solution {
            get {
                return this.SolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.SolutionField, value) != true)) {
                    this.SolutionField = value;
                    this.RaisePropertyChanged("Solution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Tradeoffs {
            get {
                return this.TradeoffsField;
            }
            set {
                if ((object.ReferenceEquals(this.TradeoffsField, value) != true)) {
                    this.TradeoffsField = value;
                    this.RaisePropertyChanged("Tradeoffs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string RelatedPatterns {
            get {
                return this.RelatedPatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedPatternsField, value) != true)) {
                    this.RelatedPatternsField = value;
                    this.RaisePropertyChanged("RelatedPatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string References {
            get {
                return this.ReferencesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencesField, value) != true)) {
                    this.ReferencesField = value;
                    this.RaisePropertyChanged("References");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoriePatterns {
            get {
                return this.RelationCategoriePatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoriePatternsField, value) != true)) {
                    this.RelationCategoriePatternsField = value;
                    this.RaisePropertyChanged("RelationCategoriePatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=13)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationDomainPattern> RelationDomainPatterns {
            get {
                return this.RelationDomainPatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationDomainPatternsField, value) != true)) {
                    this.RelationDomainPatternsField = value;
                    this.RaisePropertyChanged("RelationDomainPatterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=14)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateRequirements {
            get {
                return this.RelationPatternPrivateRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternPrivateRequirementsField, value) != true)) {
                    this.RelationPatternPrivateRequirementsField = value;
                    this.RaisePropertyChanged("RelationPatternPrivateRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=15)]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirements {
            get {
                return this.RelationPatternRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternRequirementsField, value) != true)) {
                    this.RelationPatternRequirementsField = value;
                    this.RaisePropertyChanged("RelationPatternRequirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationCategoriePattern", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationCategoriePattern : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CategorieIDField;
        
        private int PatternIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategorieID {
            get {
                return this.CategorieIDField;
            }
            set {
                if ((this.CategorieIDField.Equals(value) != true)) {
                    this.CategorieIDField = value;
                    this.RaisePropertyChanged("CategorieID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatternID {
            get {
                return this.PatternIDField;
            }
            set {
                if ((this.PatternIDField.Equals(value) != true)) {
                    this.PatternIDField = value;
                    this.RaisePropertyChanged("PatternID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationCategorieRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationCategorieRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CategorieIDField;
        
        private int RequirementIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategorieID {
            get {
                return this.CategorieIDField;
            }
            set {
                if ((this.CategorieIDField.Equals(value) != true)) {
                    this.CategorieIDField = value;
                    this.RaisePropertyChanged("CategorieID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationDomainPattern", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationDomainPattern : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DomainIDField;
        
        private int PatternIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainID {
            get {
                return this.DomainIDField;
            }
            set {
                if ((this.DomainIDField.Equals(value) != true)) {
                    this.DomainIDField = value;
                    this.RaisePropertyChanged("DomainID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatternID {
            get {
                return this.PatternIDField;
            }
            set {
                if ((this.PatternIDField.Equals(value) != true)) {
                    this.PatternIDField = value;
                    this.RaisePropertyChanged("PatternID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationPatternRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationPatternRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PatternIDField;
        
        private int RequirementIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatternID {
            get {
                return this.PatternIDField;
            }
            set {
                if ((this.PatternIDField.Equals(value) != true)) {
                    this.PatternIDField = value;
                    this.RaisePropertyChanged("PatternID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationDomainRequirement", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService")]
    public partial class RelationDomainRequirement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DomainIDField;
        
        private int RequirementIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainID {
            get {
                return this.DomainIDField;
            }
            set {
                if ((this.DomainIDField.Equals(value) != true)) {
                    this.DomainIDField = value;
                    this.RaisePropertyChanged("DomainID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementID {
            get {
                return this.RequirementIDField;
            }
            set {
                if ((this.RequirementIDField.Equals(value) != true)) {
                    this.RequirementIDField = value;
                    this.RaisePropertyChanged("RequirementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pattern_RequirementAndCategories", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class Pattern_RequirementAndCategories : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> CategoriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private myRequirements.ServiceReference1.Pattern PatternField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirement> RequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public myRequirements.ServiceReference1.Pattern Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirement> PrivateRequirement {
            get {
                return this.PrivateRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateRequirementField, value) != true)) {
                    this.PrivateRequirementField = value;
                    this.RaisePropertyChanged("PrivateRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirement> Requirements {
            get {
                return this.RequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementsField, value) != true)) {
                    this.RequirementsField = value;
                    this.RaisePropertyChanged("Requirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Categories_RequirementsAndPatterns", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class Categories_RequirementsAndPatterns : object, System.ComponentModel.INotifyPropertyChanged {
        
        private myRequirements.ServiceReference1.Categorie CategorieField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> PatternsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirement> RequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public myRequirements.ServiceReference1.Categorie Categorie {
            get {
                return this.CategorieField;
            }
            set {
                if ((object.ReferenceEquals(this.CategorieField, value) != true)) {
                    this.CategorieField = value;
                    this.RaisePropertyChanged("Categorie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> Patterns {
            get {
                return this.PatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternsField, value) != true)) {
                    this.PatternsField = value;
                    this.RaisePropertyChanged("Patterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirement> Requirements {
            get {
                return this.RequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementsField, value) != true)) {
                    this.RequirementsField = value;
                    this.RaisePropertyChanged("Requirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequirementsAndPatternsAndCategoriesAndPrivRequirements", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class RequirementsAndPatternsAndCategoriesAndPrivRequirements : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> CategoriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> PatternsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> PrivRequirementsField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoryPatternField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoryPrivateSecurityRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategoryRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateSecurityRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateSecurityRequirementField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> RequirementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern> Patterns {
            get {
                return this.PatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternsField, value) != true)) {
                    this.PatternsField = value;
                    this.RaisePropertyChanged("Patterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> PrivRequirements {
            get {
                return this.PrivRequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivRequirementsField, value) != true)) {
                    this.PrivRequirementsField = value;
                    this.RaisePropertyChanged("PrivRequirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> RelationCategoryPattern {
            get {
                return this.RelationCategoryPatternField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoryPatternField, value) != true)) {
                    this.RelationCategoryPatternField = value;
                    this.RaisePropertyChanged("RelationCategoryPattern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> RelationCategoryPrivateSecurityRequirement {
            get {
                return this.RelationCategoryPrivateSecurityRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoryPrivateSecurityRequirementField, value) != true)) {
                    this.RelationCategoryPrivateSecurityRequirementField = value;
                    this.RaisePropertyChanged("RelationCategoryPrivateSecurityRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> RelationCategoryRequirement {
            get {
                return this.RelationCategoryRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationCategoryRequirementField, value) != true)) {
                    this.RelationCategoryRequirementField = value;
                    this.RaisePropertyChanged("RelationCategoryRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> RelationPatternPrivateSecurityRequirement {
            get {
                return this.RelationPatternPrivateSecurityRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternPrivateSecurityRequirementField, value) != true)) {
                    this.RelationPatternPrivateSecurityRequirementField = value;
                    this.RaisePropertyChanged("RelationPatternPrivateSecurityRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> RelationPatternRequirement {
            get {
                return this.RelationPatternRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationPatternRequirementField, value) != true)) {
                    this.RelationPatternRequirementField = value;
                    this.RaisePropertyChanged("RelationPatternRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationProjectPrivateRequirement> RelationProjectPrivateSecurityRequirement {
            get {
                return this.RelationProjectPrivateSecurityRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationProjectPrivateSecurityRequirementField, value) != true)) {
                    this.RelationProjectPrivateSecurityRequirementField = value;
                    this.RaisePropertyChanged("RelationProjectPrivateSecurityRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> Requirements {
            get {
                return this.RequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementsField, value) != true)) {
                    this.RequirementsField = value;
                    this.RaisePropertyChanged("Requirements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateRequirment_PatternsAndCategoriesAndExamples", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class PrivateRequirment_PatternsAndCategoriesAndExamples : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> CategoriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> ExamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> PatternsField;
        
        private myRequirements.ServiceReference1.PrivateRequirement RequirementField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categorie> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Example> Examples {
            get {
                return this.ExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamplesField, value) != true)) {
                    this.ExamplesField = value;
                    this.RaisePropertyChanged("Examples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> Patterns {
            get {
                return this.PatternsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternsField, value) != true)) {
                    this.PatternsField = value;
                    this.RaisePropertyChanged("Patterns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public myRequirements.ServiceReference1.PrivateRequirement Requirement {
            get {
                return this.RequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementField, value) != true)) {
                    this.RequirementField = value;
                    this.RaisePropertyChanged("Requirement");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statistic", Namespace="http://schemas.datacontract.org/2004/07/myRequirementsWebService.Data")]
    public partial class Statistic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int numPubSeqReqField;
        
        private int numSeqReqField;
        
        private int numSuggestedSeqActivitiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numPubSeqReq {
            get {
                return this.numPubSeqReqField;
            }
            set {
                if ((this.numPubSeqReqField.Equals(value) != true)) {
                    this.numPubSeqReqField = value;
                    this.RaisePropertyChanged("numPubSeqReq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numSeqReq {
            get {
                return this.numSeqReqField;
            }
            set {
                if ((this.numSeqReqField.Equals(value) != true)) {
                    this.numSeqReqField = value;
                    this.RaisePropertyChanged("numSeqReq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numSuggestedSeqActivities {
            get {
                return this.numSuggestedSeqActivitiesField;
            }
            set {
                if ((this.numSuggestedSeqActivitiesField.Equals(value) != true)) {
                    this.numSuggestedSeqActivitiesField = value;
                    this.RaisePropertyChanged("numSuggestedSeqActivities");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.WebService")]
    public interface WebService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/Login", ReplyAction="urn:WebService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewUser", ReplyAction="urn:WebService/CreateNewUserResponse")]
        System.IAsyncResult BeginCreateNewUser(myRequirements.ServiceReference1.User user, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/RecoverLostPasswordByEmail", ReplyAction="urn:WebService/RecoverLostPasswordByEmailResponse")]
        System.IAsyncResult BeginRecoverLostPasswordByEmail(string address, System.AsyncCallback callback, object asyncState);
        
        string EndRecoverLostPasswordByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getAllUsers", ReplyAction="urn:WebService/getAllUsersResponse")]
        System.IAsyncResult BegingetAllUsers(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> EndgetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/OverrideLoginAs", ReplyAction="urn:WebService/OverrideLoginAsResponse")]
        System.IAsyncResult BeginOverrideLoginAs(string SessionID, int userid, System.AsyncCallback callback, object asyncState);
        
        string EndOverrideLoginAs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdateUsers", ReplyAction="urn:WebService/UpdateUsersResponse")]
        System.IAsyncResult BeginUpdateUsers(string SessionID, System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeleteUser", ReplyAction="urn:WebService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(string SessionID, int userID, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCurrentUserInformation", ReplyAction="urn:WebService/getCurrentUserInformationResponse")]
        System.IAsyncResult BegingetCurrentUserInformation(string SessionID, System.AsyncCallback callback, object asyncState);
        
        myRequirements.ServiceReference1.User EndgetCurrentUserInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/GetAllSRP", ReplyAction="urn:WebService/GetAllSRPResponse")]
        System.IAsyncResult BeginGetAllSRP(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> EndGetAllSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewSRP", ReplyAction="urn:WebService/CreateNewSRPResponse")]
        System.IAsyncResult BeginCreateNewSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdateSRP", ReplyAction="urn:WebService/UpdateSRPResponse")]
        System.IAsyncResult BeginUpdateSRP(string SessionID, myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeleteSRP", ReplyAction="urn:WebService/DeleteSRPResponse")]
        System.IAsyncResult BeginDeleteSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/GetAllSDP", ReplyAction="urn:WebService/GetAllSDPResponse")]
        System.IAsyncResult BeginGetAllSDP(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> EndGetAllSDP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewSDP", ReplyAction="urn:WebService/CreateNewSDPResponse")]
        System.IAsyncResult BeginCreateNewSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewSDP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdateSDP", ReplyAction="urn:WebService/UpdateSDPResponse")]
        System.IAsyncResult BeginUpdateSDP(string SessionID, myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateSDP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeleteSDP", ReplyAction="urn:WebService/DeleteSDPResponse")]
        System.IAsyncResult BeginDeleteSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteSDP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/GetAllCategories", ReplyAction="urn:WebService/GetAllCategoriesResponse")]
        System.IAsyncResult BeginGetAllCategories(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> EndGetAllCategories(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewCategorie", ReplyAction="urn:WebService/CreateNewCategorieResponse")]
        System.IAsyncResult BeginCreateNewCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewCategorie(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdateCategorie", ReplyAction="urn:WebService/UpdateCategorieResponse")]
        System.IAsyncResult BeginUpdateCategorie(string SessionID, myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateCategorie(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeleteCategorie", ReplyAction="urn:WebService/DeleteCategorieResponse")]
        System.IAsyncResult BeginDeleteCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteCategorie(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addPatternAndRequirementRelation", ReplyAction="urn:WebService/addPatternAndRequirementRelationResponse")]
        System.IAsyncResult BeginaddPatternAndRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState);
        
        string EndaddPatternAndRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addPatternAndPrivateRequirementRelation", ReplyAction="urn:WebService/addPatternAndPrivateRequirementRelationResponse")]
        System.IAsyncResult BeginaddPatternAndPrivateRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState);
        
        string EndaddPatternAndPrivateRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removePatternandRequirementRelation", ReplyAction="urn:WebService/removePatternandRequirementRelationResponse")]
        System.IAsyncResult BeginremovePatternandRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        string EndremovePatternandRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removePatternandPrivateRequirementRelation", ReplyAction="urn:WebService/removePatternandPrivateRequirementRelationResponse")]
        System.IAsyncResult BeginremovePatternandPrivateRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        string EndremovePatternandPrivateRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addCategoryAndRequirementRelation", ReplyAction="urn:WebService/addCategoryAndRequirementRelationResponse")]
        System.IAsyncResult BeginaddCategoryAndRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        string EndaddCategoryAndRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addCategoryAndPrivateRequirementRelation", ReplyAction="urn:WebService/addCategoryAndPrivateRequirementRelationResponse")]
        System.IAsyncResult BeginaddCategoryAndPrivateRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        string EndaddCategoryAndPrivateRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removeCategoryAndRequirementRelation", ReplyAction="urn:WebService/removeCategoryAndRequirementRelationResponse")]
        System.IAsyncResult BeginremoveCategoryAndRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        string EndremoveCategoryAndRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removeCategoryAndPrivateRequirementRelation", ReplyAction="urn:WebService/removeCategoryAndPrivateRequirementRelationResponse")]
        System.IAsyncResult BeginremoveCategoryAndPrivateRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        string EndremoveCategoryAndPrivateRequirementRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addNewRequirementExampleByRequirmentID", ReplyAction="urn:WebService/addNewRequirementExampleByRequirmentIDResponse")]
        System.IAsyncResult BeginaddNewRequirementExampleByRequirmentID(string SessionID, int reqID, System.AsyncCallback callback, object asyncState);
        
        string EndaddNewRequirementExampleByRequirmentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removeRequirementExampleByRequirementID", ReplyAction="urn:WebService/removeRequirementExampleByRequirementIDResponse")]
        System.IAsyncResult BeginremoveRequirementExampleByRequirementID(string SessionID, int requirementID, int exampleID, System.AsyncCallback callback, object asyncState);
        
        string EndremoveRequirementExampleByRequirementID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/addCategoryAndDesignRelation", ReplyAction="urn:WebService/addCategoryAndDesignRelationResponse")]
        System.IAsyncResult BeginaddCategoryAndDesignRelation(string SessionID, int patID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        string EndaddCategoryAndDesignRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/removeCategoryAndPatternRelation", ReplyAction="urn:WebService/removeCategoryAndPatternRelationResponse")]
        System.IAsyncResult BeginremoveCategoryAndPatternRelation(string SessionID, int categoryID, int patternID, System.AsyncCallback callback, object asyncState);
        
        string EndremoveCategoryAndPatternRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndRequirementRelationsBycategoryID", ReplyAction="urn:WebService/getCategoryAndRequirementRelationsBycategoryIDResponse")]
        System.IAsyncResult BegingetCategoryAndRequirementRelationsBycategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> EndgetCategoryAndRequirementRelationsBycategoryID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndRequirementRelationsByRequirementID", ReplyAction="urn:WebService/getCategoryAndRequirementRelationsByRequirementIDResponse")]
        System.IAsyncResult BegingetCategoryAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> EndgetCategoryAndRequirementRelationsByRequirementID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndPattnerRelationsByCategoryID", ReplyAction="urn:WebService/getCategoryAndPattnerRelationsByCategoryIDResponse")]
        System.IAsyncResult BegingetCategoryAndPattnerRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> EndgetCategoryAndPattnerRelationsByCategoryID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndPattnerRelationsByPatternID", ReplyAction="urn:WebService/getCategoryAndPattnerRelationsByPatternIDResponse")]
        System.IAsyncResult BegingetCategoryAndPattnerRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> EndgetCategoryAndPattnerRelationsByPatternID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getPatternAndRequirementRelationsByPatternID", ReplyAction="urn:WebService/getPatternAndRequirementRelationsByPatternIDResponse")]
        System.IAsyncResult BegingetPatternAndRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> EndgetPatternAndRequirementRelationsByPatternID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getPatternAndRequirementRelationsByRequirementID", ReplyAction="urn:WebService/getPatternAndRequirementRelationsByRequirementIDResponse")]
        System.IAsyncResult BegingetPatternAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> EndgetPatternAndRequirementRelationsByRequirementID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getPatternAndPrivateRequirementRelationsByPatternID", ReplyAction="urn:WebService/getPatternAndPrivateRequirementRelationsByPatternIDResponse")]
        System.IAsyncResult BegingetPatternAndPrivateRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> EndgetPatternAndPrivateRequirementRelationsByPatternID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getPatternAndPrivateRequirementRelationsByPrivateRequirmentID", ReplyAction="urn:WebService/getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDRespo" +
            "nse")]
        System.IAsyncResult BegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> EndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndPrivateRequirementRelationsByCategoryID", ReplyAction="urn:WebService/getCategoryAndPrivateRequirementRelationsByCategoryIDResponse")]
        System.IAsyncResult BegingetCategoryAndPrivateRequirementRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> EndgetCategoryAndPrivateRequirementRelationsByCategoryID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getCategoryAndPrivateRequirementRelationsByPrivateRequirementID", ReplyAction="urn:WebService/getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDRes" +
            "ponse")]
        System.IAsyncResult BegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> EndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getAllData", ReplyAction="urn:WebService/getAllDataResponse")]
        System.IAsyncResult BegingetAllData(string SessionID, System.AsyncCallback callback, object asyncState);
        
        myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements EndgetAllData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/GetAllProjects", ReplyAction="urn:WebService/GetAllProjectsResponse")]
        System.IAsyncResult BeginGetAllProjects(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> EndGetAllProjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewProject", ReplyAction="urn:WebService/CreateNewProjectResponse")]
        System.IAsyncResult BeginCreateNewProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdateProject", ReplyAction="urn:WebService/UpdateProjectResponse")]
        System.IAsyncResult BeginUpdateProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeleteProject", ReplyAction="urn:WebService/DeleteProjectResponse")]
        System.IAsyncResult BeginDeleteProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/SetActiveProject", ReplyAction="urn:WebService/SetActiveProjectResponse")]
        System.IAsyncResult BeginSetActiveProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState);
        
        string EndSetActiveProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/toggleActivePrivateRequirement", ReplyAction="urn:WebService/toggleActivePrivateRequirementResponse")]
        System.IAsyncResult BegintoggleActivePrivateRequirement(string SessionID, int ProjectID, int PrivateRequirementID, System.AsyncCallback callback, object asyncState);
        
        string EndtoggleActivePrivateRequirement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/toggleActiveRequirement", ReplyAction="urn:WebService/toggleActiveRequirementResponse")]
        System.IAsyncResult BegintoggleActiveRequirement(string SessionID, int ProjectID, int RequirementID, System.AsyncCallback callback, object asyncState);
        
        string EndtoggleActiveRequirement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/getStatisticsByProjectID", ReplyAction="urn:WebService/getStatisticsByProjectIDResponse")]
        System.IAsyncResult BegingetStatisticsByProjectID(string SessionID, int ProjectID, System.AsyncCallback callback, object asyncState);
        
        myRequirements.ServiceReference1.Statistic EndgetStatisticsByProjectID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/GetAllPSRP", ReplyAction="urn:WebService/GetAllPSRPResponse")]
        System.IAsyncResult BeginGetAllPSRP(string SessionID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> EndGetAllPSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/CreateNewPSRP", ReplyAction="urn:WebService/CreateNewPSRPResponse")]
        System.IAsyncResult BeginCreateNewPSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, int projectID, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewPSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/UpdatePSRP", ReplyAction="urn:WebService/UpdatePSRPResponse")]
        System.IAsyncResult BeginUpdatePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState);
        
        string EndUpdatePSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/DeletePSRP", ReplyAction="urn:WebService/DeletePSRPResponse")]
        System.IAsyncResult BeginDeletePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, System.AsyncCallback callback, object asyncState);
        
        string EndDeletePSRP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WebService/createPrivateRequirementByRequirementID", ReplyAction="urn:WebService/createPrivateRequirementByRequirementIDResponse")]
        System.IAsyncResult BegincreatePrivateRequirementByRequirementID(string SessionID, int requirementID, int privateRequirementID, System.AsyncCallback callback, object asyncState);
        
        string EndcreatePrivateRequirementByRequirementID(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WebServiceChannel : myRequirements.ServiceReference1.WebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class RecoverLostPasswordByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecoverLostPasswordByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class OverrideLoginAsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OverrideLoginAsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCurrentUserInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCurrentUserInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public myRequirements.ServiceReference1.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((myRequirements.ServiceReference1.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllSDPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllSDPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewSDPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewSDPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateSDPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSDPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteSDPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteSDPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewCategorieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewCategorieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateCategorieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCategorieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteCategorieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCategorieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addPatternAndRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addPatternAndRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addPatternAndPrivateRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addPatternAndPrivateRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removePatternandRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removePatternandRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removePatternandPrivateRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removePatternandPrivateRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addCategoryAndRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addCategoryAndRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addCategoryAndPrivateRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addCategoryAndPrivateRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removeCategoryAndRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeCategoryAndRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removeCategoryAndPrivateRequirementRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeCategoryAndPrivateRequirementRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addNewRequirementExampleByRequirmentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addNewRequirementExampleByRequirmentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removeRequirementExampleByRequirementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeRequirementExampleByRequirementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class addCategoryAndDesignRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addCategoryAndDesignRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class removeCategoryAndPatternRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeCategoryAndPatternRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndRequirementRelationsBycategoryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndRequirementRelationsBycategoryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndRequirementRelationsByRequirementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndRequirementRelationsByRequirementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndPattnerRelationsByCategoryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndPattnerRelationsByCategoryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndPattnerRelationsByPatternIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndPattnerRelationsByPatternIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getPatternAndRequirementRelationsByPatternIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPatternAndRequirementRelationsByPatternIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getPatternAndRequirementRelationsByRequirementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPatternAndRequirementRelationsByRequirementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getPatternAndPrivateRequirementRelationsByPatternIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPatternAndPrivateRequirementRelationsByPatternIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndPrivateRequirementRelationsByCategoryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndPrivateRequirementRelationsByCategoryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getAllDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAllDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SetActiveProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetActiveProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class toggleActivePrivateRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public toggleActivePrivateRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class toggleActiveRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public toggleActiveRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class getStatisticsByProjectIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getStatisticsByProjectIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public myRequirements.ServiceReference1.Statistic Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((myRequirements.ServiceReference1.Statistic)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAllPSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewPSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewPSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdatePSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdatePSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeletePSRPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeletePSRPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class createPrivateRequirementByRequirementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createPrivateRequirementByRequirementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<myRequirements.ServiceReference1.WebService>, myRequirements.ServiceReference1.WebService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewUserDelegate;
        
        private EndOperationDelegate onEndCreateNewUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecoverLostPasswordByEmailDelegate;
        
        private EndOperationDelegate onEndRecoverLostPasswordByEmailDelegate;
        
        private System.Threading.SendOrPostCallback onRecoverLostPasswordByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllUsersDelegate;
        
        private EndOperationDelegate onEndgetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginOverrideLoginAsDelegate;
        
        private EndOperationDelegate onEndOverrideLoginAsDelegate;
        
        private System.Threading.SendOrPostCallback onOverrideLoginAsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUsersDelegate;
        
        private EndOperationDelegate onEndUpdateUsersDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCurrentUserInformationDelegate;
        
        private EndOperationDelegate onEndgetCurrentUserInformationDelegate;
        
        private System.Threading.SendOrPostCallback ongetCurrentUserInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllSRPDelegate;
        
        private EndOperationDelegate onEndGetAllSRPDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewSRPDelegate;
        
        private EndOperationDelegate onEndCreateNewSRPDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSRPDelegate;
        
        private EndOperationDelegate onEndUpdateSRPDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSRPDelegate;
        
        private EndOperationDelegate onEndDeleteSRPDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllSDPDelegate;
        
        private EndOperationDelegate onEndGetAllSDPDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllSDPCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewSDPDelegate;
        
        private EndOperationDelegate onEndCreateNewSDPDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewSDPCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSDPDelegate;
        
        private EndOperationDelegate onEndUpdateSDPDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSDPCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSDPDelegate;
        
        private EndOperationDelegate onEndDeleteSDPDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSDPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCategoriesDelegate;
        
        private EndOperationDelegate onEndGetAllCategoriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCategoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewCategorieDelegate;
        
        private EndOperationDelegate onEndCreateNewCategorieDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewCategorieCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCategorieDelegate;
        
        private EndOperationDelegate onEndUpdateCategorieDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCategorieCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCategorieDelegate;
        
        private EndOperationDelegate onEndDeleteCategorieDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCategorieCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddPatternAndRequirementRelationDelegate;
        
        private EndOperationDelegate onEndaddPatternAndRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onaddPatternAndRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddPatternAndPrivateRequirementRelationDelegate;
        
        private EndOperationDelegate onEndaddPatternAndPrivateRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onaddPatternAndPrivateRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginremovePatternandRequirementRelationDelegate;
        
        private EndOperationDelegate onEndremovePatternandRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onremovePatternandRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginremovePatternandPrivateRequirementRelationDelegate;
        
        private EndOperationDelegate onEndremovePatternandPrivateRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onremovePatternandPrivateRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddCategoryAndRequirementRelationDelegate;
        
        private EndOperationDelegate onEndaddCategoryAndRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onaddCategoryAndRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddCategoryAndPrivateRequirementRelationDelegate;
        
        private EndOperationDelegate onEndaddCategoryAndPrivateRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onaddCategoryAndPrivateRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveCategoryAndRequirementRelationDelegate;
        
        private EndOperationDelegate onEndremoveCategoryAndRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onremoveCategoryAndRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveCategoryAndPrivateRequirementRelationDelegate;
        
        private EndOperationDelegate onEndremoveCategoryAndPrivateRequirementRelationDelegate;
        
        private System.Threading.SendOrPostCallback onremoveCategoryAndPrivateRequirementRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddNewRequirementExampleByRequirmentIDDelegate;
        
        private EndOperationDelegate onEndaddNewRequirementExampleByRequirmentIDDelegate;
        
        private System.Threading.SendOrPostCallback onaddNewRequirementExampleByRequirmentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveRequirementExampleByRequirementIDDelegate;
        
        private EndOperationDelegate onEndremoveRequirementExampleByRequirementIDDelegate;
        
        private System.Threading.SendOrPostCallback onremoveRequirementExampleByRequirementIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddCategoryAndDesignRelationDelegate;
        
        private EndOperationDelegate onEndaddCategoryAndDesignRelationDelegate;
        
        private System.Threading.SendOrPostCallback onaddCategoryAndDesignRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveCategoryAndPatternRelationDelegate;
        
        private EndOperationDelegate onEndremoveCategoryAndPatternRelationDelegate;
        
        private System.Threading.SendOrPostCallback onremoveCategoryAndPatternRelationCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndRequirementRelationsBycategoryIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndRequirementRelationsBycategoryIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndRequirementRelationsBycategoryIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndRequirementRelationsByRequirementIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndRequirementRelationsByRequirementIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndRequirementRelationsByRequirementIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndPattnerRelationsByCategoryIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndPattnerRelationsByCategoryIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndPattnerRelationsByCategoryIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndPattnerRelationsByPatternIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndPattnerRelationsByPatternIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndPattnerRelationsByPatternIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPatternAndRequirementRelationsByPatternIDDelegate;
        
        private EndOperationDelegate onEndgetPatternAndRequirementRelationsByPatternIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetPatternAndRequirementRelationsByPatternIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPatternAndRequirementRelationsByRequirementIDDelegate;
        
        private EndOperationDelegate onEndgetPatternAndRequirementRelationsByRequirementIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetPatternAndRequirementRelationsByRequirementIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPatternAndPrivateRequirementRelationsByPatternIDDelegate;
        
        private EndOperationDelegate onEndgetPatternAndPrivateRequirementRelationsByPatternIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetPatternAndPrivateRequirementRelationsByPatternIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate;
        
        private EndOperationDelegate onEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndPrivateRequirementRelationsByCategoryIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate;
        
        private EndOperationDelegate onEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllDataDelegate;
        
        private EndOperationDelegate onEndgetAllDataDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllProjectsDelegate;
        
        private EndOperationDelegate onEndGetAllProjectsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllProjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewProjectDelegate;
        
        private EndOperationDelegate onEndCreateNewProjectDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateProjectDelegate;
        
        private EndOperationDelegate onEndUpdateProjectDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteProjectDelegate;
        
        private EndOperationDelegate onEndDeleteProjectDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetActiveProjectDelegate;
        
        private EndOperationDelegate onEndSetActiveProjectDelegate;
        
        private System.Threading.SendOrPostCallback onSetActiveProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegintoggleActivePrivateRequirementDelegate;
        
        private EndOperationDelegate onEndtoggleActivePrivateRequirementDelegate;
        
        private System.Threading.SendOrPostCallback ontoggleActivePrivateRequirementCompletedDelegate;
        
        private BeginOperationDelegate onBegintoggleActiveRequirementDelegate;
        
        private EndOperationDelegate onEndtoggleActiveRequirementDelegate;
        
        private System.Threading.SendOrPostCallback ontoggleActiveRequirementCompletedDelegate;
        
        private BeginOperationDelegate onBegingetStatisticsByProjectIDDelegate;
        
        private EndOperationDelegate onEndgetStatisticsByProjectIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetStatisticsByProjectIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPSRPDelegate;
        
        private EndOperationDelegate onEndGetAllPSRPDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewPSRPDelegate;
        
        private EndOperationDelegate onEndCreateNewPSRPDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewPSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePSRPDelegate;
        
        private EndOperationDelegate onEndUpdatePSRPDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePSRPCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePSRPDelegate;
        
        private EndOperationDelegate onEndDeletePSRPDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePSRPCompletedDelegate;
        
        private BeginOperationDelegate onBegincreatePrivateRequirementByRequirementIDDelegate;
        
        private EndOperationDelegate onEndcreatePrivateRequirementByRequirementIDDelegate;
        
        private System.Threading.SendOrPostCallback oncreatePrivateRequirementByRequirementIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<CreateNewUserCompletedEventArgs> CreateNewUserCompleted;
        
        public event System.EventHandler<RecoverLostPasswordByEmailCompletedEventArgs> RecoverLostPasswordByEmailCompleted;
        
        public event System.EventHandler<getAllUsersCompletedEventArgs> getAllUsersCompleted;
        
        public event System.EventHandler<OverrideLoginAsCompletedEventArgs> OverrideLoginAsCompleted;
        
        public event System.EventHandler<UpdateUsersCompletedEventArgs> UpdateUsersCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<getCurrentUserInformationCompletedEventArgs> getCurrentUserInformationCompleted;
        
        public event System.EventHandler<GetAllSRPCompletedEventArgs> GetAllSRPCompleted;
        
        public event System.EventHandler<CreateNewSRPCompletedEventArgs> CreateNewSRPCompleted;
        
        public event System.EventHandler<UpdateSRPCompletedEventArgs> UpdateSRPCompleted;
        
        public event System.EventHandler<DeleteSRPCompletedEventArgs> DeleteSRPCompleted;
        
        public event System.EventHandler<GetAllSDPCompletedEventArgs> GetAllSDPCompleted;
        
        public event System.EventHandler<CreateNewSDPCompletedEventArgs> CreateNewSDPCompleted;
        
        public event System.EventHandler<UpdateSDPCompletedEventArgs> UpdateSDPCompleted;
        
        public event System.EventHandler<DeleteSDPCompletedEventArgs> DeleteSDPCompleted;
        
        public event System.EventHandler<GetAllCategoriesCompletedEventArgs> GetAllCategoriesCompleted;
        
        public event System.EventHandler<CreateNewCategorieCompletedEventArgs> CreateNewCategorieCompleted;
        
        public event System.EventHandler<UpdateCategorieCompletedEventArgs> UpdateCategorieCompleted;
        
        public event System.EventHandler<DeleteCategorieCompletedEventArgs> DeleteCategorieCompleted;
        
        public event System.EventHandler<addPatternAndRequirementRelationCompletedEventArgs> addPatternAndRequirementRelationCompleted;
        
        public event System.EventHandler<addPatternAndPrivateRequirementRelationCompletedEventArgs> addPatternAndPrivateRequirementRelationCompleted;
        
        public event System.EventHandler<removePatternandRequirementRelationCompletedEventArgs> removePatternandRequirementRelationCompleted;
        
        public event System.EventHandler<removePatternandPrivateRequirementRelationCompletedEventArgs> removePatternandPrivateRequirementRelationCompleted;
        
        public event System.EventHandler<addCategoryAndRequirementRelationCompletedEventArgs> addCategoryAndRequirementRelationCompleted;
        
        public event System.EventHandler<addCategoryAndPrivateRequirementRelationCompletedEventArgs> addCategoryAndPrivateRequirementRelationCompleted;
        
        public event System.EventHandler<removeCategoryAndRequirementRelationCompletedEventArgs> removeCategoryAndRequirementRelationCompleted;
        
        public event System.EventHandler<removeCategoryAndPrivateRequirementRelationCompletedEventArgs> removeCategoryAndPrivateRequirementRelationCompleted;
        
        public event System.EventHandler<addNewRequirementExampleByRequirmentIDCompletedEventArgs> addNewRequirementExampleByRequirmentIDCompleted;
        
        public event System.EventHandler<removeRequirementExampleByRequirementIDCompletedEventArgs> removeRequirementExampleByRequirementIDCompleted;
        
        public event System.EventHandler<addCategoryAndDesignRelationCompletedEventArgs> addCategoryAndDesignRelationCompleted;
        
        public event System.EventHandler<removeCategoryAndPatternRelationCompletedEventArgs> removeCategoryAndPatternRelationCompleted;
        
        public event System.EventHandler<getCategoryAndRequirementRelationsBycategoryIDCompletedEventArgs> getCategoryAndRequirementRelationsBycategoryIDCompleted;
        
        public event System.EventHandler<getCategoryAndRequirementRelationsByRequirementIDCompletedEventArgs> getCategoryAndRequirementRelationsByRequirementIDCompleted;
        
        public event System.EventHandler<getCategoryAndPattnerRelationsByCategoryIDCompletedEventArgs> getCategoryAndPattnerRelationsByCategoryIDCompleted;
        
        public event System.EventHandler<getCategoryAndPattnerRelationsByPatternIDCompletedEventArgs> getCategoryAndPattnerRelationsByPatternIDCompleted;
        
        public event System.EventHandler<getPatternAndRequirementRelationsByPatternIDCompletedEventArgs> getPatternAndRequirementRelationsByPatternIDCompleted;
        
        public event System.EventHandler<getPatternAndRequirementRelationsByRequirementIDCompletedEventArgs> getPatternAndRequirementRelationsByRequirementIDCompleted;
        
        public event System.EventHandler<getPatternAndPrivateRequirementRelationsByPatternIDCompletedEventArgs> getPatternAndPrivateRequirementRelationsByPatternIDCompleted;
        
        public event System.EventHandler<getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedEventArgs> getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompleted;
        
        public event System.EventHandler<getCategoryAndPrivateRequirementRelationsByCategoryIDCompletedEventArgs> getCategoryAndPrivateRequirementRelationsByCategoryIDCompleted;
        
        public event System.EventHandler<getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedEventArgs> getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompleted;
        
        public event System.EventHandler<getAllDataCompletedEventArgs> getAllDataCompleted;
        
        public event System.EventHandler<GetAllProjectsCompletedEventArgs> GetAllProjectsCompleted;
        
        public event System.EventHandler<CreateNewProjectCompletedEventArgs> CreateNewProjectCompleted;
        
        public event System.EventHandler<UpdateProjectCompletedEventArgs> UpdateProjectCompleted;
        
        public event System.EventHandler<DeleteProjectCompletedEventArgs> DeleteProjectCompleted;
        
        public event System.EventHandler<SetActiveProjectCompletedEventArgs> SetActiveProjectCompleted;
        
        public event System.EventHandler<toggleActivePrivateRequirementCompletedEventArgs> toggleActivePrivateRequirementCompleted;
        
        public event System.EventHandler<toggleActiveRequirementCompletedEventArgs> toggleActiveRequirementCompleted;
        
        public event System.EventHandler<getStatisticsByProjectIDCompletedEventArgs> getStatisticsByProjectIDCompleted;
        
        public event System.EventHandler<GetAllPSRPCompletedEventArgs> GetAllPSRPCompleted;
        
        public event System.EventHandler<CreateNewPSRPCompletedEventArgs> CreateNewPSRPCompleted;
        
        public event System.EventHandler<UpdatePSRPCompletedEventArgs> UpdatePSRPCompleted;
        
        public event System.EventHandler<DeletePSRPCompletedEventArgs> DeletePSRPCompleted;
        
        public event System.EventHandler<createPrivateRequirementByRequirementIDCompletedEventArgs> createPrivateRequirementByRequirementIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewUser(myRequirements.ServiceReference1.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewUser(System.IAsyncResult result) {
            return base.Channel.EndCreateNewUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            myRequirements.ServiceReference1.User user = ((myRequirements.ServiceReference1.User)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewUser(user, callback, asyncState);
        }
        
        private object[] OnEndCreateNewUser(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewUserCompleted(object state) {
            if ((this.CreateNewUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewUserCompleted(this, new CreateNewUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewUserAsync(myRequirements.ServiceReference1.User user) {
            this.CreateNewUserAsync(user, null);
        }
        
        public void CreateNewUserAsync(myRequirements.ServiceReference1.User user, object userState) {
            if ((this.onBeginCreateNewUserDelegate == null)) {
                this.onBeginCreateNewUserDelegate = new BeginOperationDelegate(this.OnBeginCreateNewUser);
            }
            if ((this.onEndCreateNewUserDelegate == null)) {
                this.onEndCreateNewUserDelegate = new EndOperationDelegate(this.OnEndCreateNewUser);
            }
            if ((this.onCreateNewUserCompletedDelegate == null)) {
                this.onCreateNewUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewUserDelegate, new object[] {
                        user}, this.onEndCreateNewUserDelegate, this.onCreateNewUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginRecoverLostPasswordByEmail(string address, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecoverLostPasswordByEmail(address, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndRecoverLostPasswordByEmail(System.IAsyncResult result) {
            return base.Channel.EndRecoverLostPasswordByEmail(result);
        }
        
        private System.IAsyncResult OnBeginRecoverLostPasswordByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string address = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginRecoverLostPasswordByEmail(address, callback, asyncState);
        }
        
        private object[] OnEndRecoverLostPasswordByEmail(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndRecoverLostPasswordByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecoverLostPasswordByEmailCompleted(object state) {
            if ((this.RecoverLostPasswordByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecoverLostPasswordByEmailCompleted(this, new RecoverLostPasswordByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecoverLostPasswordByEmailAsync(string address) {
            this.RecoverLostPasswordByEmailAsync(address, null);
        }
        
        public void RecoverLostPasswordByEmailAsync(string address, object userState) {
            if ((this.onBeginRecoverLostPasswordByEmailDelegate == null)) {
                this.onBeginRecoverLostPasswordByEmailDelegate = new BeginOperationDelegate(this.OnBeginRecoverLostPasswordByEmail);
            }
            if ((this.onEndRecoverLostPasswordByEmailDelegate == null)) {
                this.onEndRecoverLostPasswordByEmailDelegate = new EndOperationDelegate(this.OnEndRecoverLostPasswordByEmail);
            }
            if ((this.onRecoverLostPasswordByEmailCompletedDelegate == null)) {
                this.onRecoverLostPasswordByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecoverLostPasswordByEmailCompleted);
            }
            base.InvokeAsync(this.onBeginRecoverLostPasswordByEmailDelegate, new object[] {
                        address}, this.onEndRecoverLostPasswordByEmailDelegate, this.onRecoverLostPasswordByEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetAllUsers(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAllUsers(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> myRequirements.ServiceReference1.WebService.EndgetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndgetAllUsers(result);
        }
        
        private System.IAsyncResult OnBegingetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetAllUsers(SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetAllUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAllUsersCompleted(object state) {
            if ((this.getAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllUsersCompleted(this, new getAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllUsersAsync(string SessionID) {
            this.getAllUsersAsync(SessionID, null);
        }
        
        public void getAllUsersAsync(string SessionID, object userState) {
            if ((this.onBegingetAllUsersDelegate == null)) {
                this.onBegingetAllUsersDelegate = new BeginOperationDelegate(this.OnBegingetAllUsers);
            }
            if ((this.onEndgetAllUsersDelegate == null)) {
                this.onEndgetAllUsersDelegate = new EndOperationDelegate(this.OnEndgetAllUsers);
            }
            if ((this.ongetAllUsersCompletedDelegate == null)) {
                this.ongetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBegingetAllUsersDelegate, new object[] {
                        SessionID}, this.onEndgetAllUsersDelegate, this.ongetAllUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginOverrideLoginAs(string SessionID, int userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOverrideLoginAs(SessionID, userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndOverrideLoginAs(System.IAsyncResult result) {
            return base.Channel.EndOverrideLoginAs(result);
        }
        
        private System.IAsyncResult OnBeginOverrideLoginAs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int userid = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginOverrideLoginAs(SessionID, userid, callback, asyncState);
        }
        
        private object[] OnEndOverrideLoginAs(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndOverrideLoginAs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOverrideLoginAsCompleted(object state) {
            if ((this.OverrideLoginAsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OverrideLoginAsCompleted(this, new OverrideLoginAsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OverrideLoginAsAsync(string SessionID, int userid) {
            this.OverrideLoginAsAsync(SessionID, userid, null);
        }
        
        public void OverrideLoginAsAsync(string SessionID, int userid, object userState) {
            if ((this.onBeginOverrideLoginAsDelegate == null)) {
                this.onBeginOverrideLoginAsDelegate = new BeginOperationDelegate(this.OnBeginOverrideLoginAs);
            }
            if ((this.onEndOverrideLoginAsDelegate == null)) {
                this.onEndOverrideLoginAsDelegate = new EndOperationDelegate(this.OnEndOverrideLoginAs);
            }
            if ((this.onOverrideLoginAsCompletedDelegate == null)) {
                this.onOverrideLoginAsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOverrideLoginAsCompleted);
            }
            base.InvokeAsync(this.onBeginOverrideLoginAsDelegate, new object[] {
                        SessionID,
                        userid}, this.onEndOverrideLoginAsDelegate, this.onOverrideLoginAsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdateUsers(string SessionID, System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUsers(SessionID, uUsers, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdateUsers(System.IAsyncResult result) {
            return base.Channel.EndUpdateUsers(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User>)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdateUsers(SessionID, uUsers, callback, asyncState);
        }
        
        private object[] OnEndUpdateUsers(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdateUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUsersCompleted(object state) {
            if ((this.UpdateUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUsersCompleted(this, new UpdateUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUsersAsync(string SessionID, System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers) {
            this.UpdateUsersAsync(SessionID, uUsers, null);
        }
        
        public void UpdateUsersAsync(string SessionID, System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers, object userState) {
            if ((this.onBeginUpdateUsersDelegate == null)) {
                this.onBeginUpdateUsersDelegate = new BeginOperationDelegate(this.OnBeginUpdateUsers);
            }
            if ((this.onEndUpdateUsersDelegate == null)) {
                this.onEndUpdateUsersDelegate = new EndOperationDelegate(this.OnEndUpdateUsers);
            }
            if ((this.onUpdateUsersCompletedDelegate == null)) {
                this.onUpdateUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUsersCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUsersDelegate, new object[] {
                        SessionID,
                        uUsers}, this.onEndUpdateUsersDelegate, this.onUpdateUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeleteUser(string SessionID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(SessionID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeleteUser(System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeleteUser(SessionID, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeleteUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(string SessionID, int userID) {
            this.DeleteUserAsync(SessionID, userID, null);
        }
        
        public void DeleteUserAsync(string SessionID, int userID, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        SessionID,
                        userID}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCurrentUserInformation(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCurrentUserInformation(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        myRequirements.ServiceReference1.User myRequirements.ServiceReference1.WebService.EndgetCurrentUserInformation(System.IAsyncResult result) {
            return base.Channel.EndgetCurrentUserInformation(result);
        }
        
        private System.IAsyncResult OnBegingetCurrentUserInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCurrentUserInformation(SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetCurrentUserInformation(System.IAsyncResult result) {
            myRequirements.ServiceReference1.User retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCurrentUserInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCurrentUserInformationCompleted(object state) {
            if ((this.getCurrentUserInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCurrentUserInformationCompleted(this, new getCurrentUserInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCurrentUserInformationAsync(string SessionID) {
            this.getCurrentUserInformationAsync(SessionID, null);
        }
        
        public void getCurrentUserInformationAsync(string SessionID, object userState) {
            if ((this.onBegingetCurrentUserInformationDelegate == null)) {
                this.onBegingetCurrentUserInformationDelegate = new BeginOperationDelegate(this.OnBegingetCurrentUserInformation);
            }
            if ((this.onEndgetCurrentUserInformationDelegate == null)) {
                this.onEndgetCurrentUserInformationDelegate = new EndOperationDelegate(this.OnEndgetCurrentUserInformation);
            }
            if ((this.ongetCurrentUserInformationCompletedDelegate == null)) {
                this.ongetCurrentUserInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCurrentUserInformationCompleted);
            }
            base.InvokeAsync(this.onBegingetCurrentUserInformationDelegate, new object[] {
                        SessionID}, this.onEndgetCurrentUserInformationDelegate, this.ongetCurrentUserInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginGetAllSRP(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllSRP(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> myRequirements.ServiceReference1.WebService.EndGetAllSRP(System.IAsyncResult result) {
            return base.Channel.EndGetAllSRP(result);
        }
        
        private System.IAsyncResult OnBeginGetAllSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginGetAllSRP(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllSRP(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndGetAllSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllSRPCompleted(object state) {
            if ((this.GetAllSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllSRPCompleted(this, new GetAllSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllSRPAsync(string SessionID) {
            this.GetAllSRPAsync(SessionID, null);
        }
        
        public void GetAllSRPAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllSRPDelegate == null)) {
                this.onBeginGetAllSRPDelegate = new BeginOperationDelegate(this.OnBeginGetAllSRP);
            }
            if ((this.onEndGetAllSRPDelegate == null)) {
                this.onEndGetAllSRPDelegate = new EndOperationDelegate(this.OnEndGetAllSRP);
            }
            if ((this.onGetAllSRPCompletedDelegate == null)) {
                this.onGetAllSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllSRPCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllSRPDelegate, new object[] {
                        SessionID}, this.onEndGetAllSRPDelegate, this.onGetAllSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewSRP(SessionID, srp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewSRP(System.IAsyncResult result) {
            return base.Channel.EndCreateNewSRP(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Requirement srp = ((myRequirements.ServiceReference1.Requirement)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewSRP(SessionID, srp, callback, asyncState);
        }
        
        private object[] OnEndCreateNewSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewSRPCompleted(object state) {
            if ((this.CreateNewSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewSRPCompleted(this, new CreateNewSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirement srp) {
            this.CreateNewSRPAsync(SessionID, srp, null);
        }
        
        public void CreateNewSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirement srp, object userState) {
            if ((this.onBeginCreateNewSRPDelegate == null)) {
                this.onBeginCreateNewSRPDelegate = new BeginOperationDelegate(this.OnBeginCreateNewSRP);
            }
            if ((this.onEndCreateNewSRPDelegate == null)) {
                this.onEndCreateNewSRPDelegate = new EndOperationDelegate(this.OnEndCreateNewSRP);
            }
            if ((this.onCreateNewSRPCompletedDelegate == null)) {
                this.onCreateNewSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewSRPCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewSRPDelegate, new object[] {
                        SessionID,
                        srp}, this.onEndCreateNewSRPDelegate, this.onCreateNewSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdateSRP(string SessionID, myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSRP(SessionID, req, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdateSRP(System.IAsyncResult result) {
            return base.Channel.EndUpdateSRP(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req = ((myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdateSRP(SessionID, req, callback, asyncState);
        }
        
        private object[] OnEndUpdateSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdateSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSRPCompleted(object state) {
            if ((this.UpdateSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSRPCompleted(this, new UpdateSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req) {
            this.UpdateSRPAsync(SessionID, req, null);
        }
        
        public void UpdateSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req, object userState) {
            if ((this.onBeginUpdateSRPDelegate == null)) {
                this.onBeginUpdateSRPDelegate = new BeginOperationDelegate(this.OnBeginUpdateSRP);
            }
            if ((this.onEndUpdateSRPDelegate == null)) {
                this.onEndUpdateSRPDelegate = new EndOperationDelegate(this.OnEndUpdateSRP);
            }
            if ((this.onUpdateSRPCompletedDelegate == null)) {
                this.onUpdateSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSRPCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSRPDelegate, new object[] {
                        SessionID,
                        req}, this.onEndUpdateSRPDelegate, this.onUpdateSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeleteSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSRP(SessionID, srp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeleteSRP(System.IAsyncResult result) {
            return base.Channel.EndDeleteSRP(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Requirement srp = ((myRequirements.ServiceReference1.Requirement)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeleteSRP(SessionID, srp, callback, asyncState);
        }
        
        private object[] OnEndDeleteSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeleteSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSRPCompleted(object state) {
            if ((this.DeleteSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSRPCompleted(this, new DeleteSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirement srp) {
            this.DeleteSRPAsync(SessionID, srp, null);
        }
        
        public void DeleteSRPAsync(string SessionID, myRequirements.ServiceReference1.Requirement srp, object userState) {
            if ((this.onBeginDeleteSRPDelegate == null)) {
                this.onBeginDeleteSRPDelegate = new BeginOperationDelegate(this.OnBeginDeleteSRP);
            }
            if ((this.onEndDeleteSRPDelegate == null)) {
                this.onEndDeleteSRPDelegate = new EndOperationDelegate(this.OnEndDeleteSRP);
            }
            if ((this.onDeleteSRPCompletedDelegate == null)) {
                this.onDeleteSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSRPCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSRPDelegate, new object[] {
                        SessionID,
                        srp}, this.onEndDeleteSRPDelegate, this.onDeleteSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginGetAllSDP(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllSDP(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> myRequirements.ServiceReference1.WebService.EndGetAllSDP(System.IAsyncResult result) {
            return base.Channel.EndGetAllSDP(result);
        }
        
        private System.IAsyncResult OnBeginGetAllSDP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginGetAllSDP(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllSDP(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndGetAllSDP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllSDPCompleted(object state) {
            if ((this.GetAllSDPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllSDPCompleted(this, new GetAllSDPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllSDPAsync(string SessionID) {
            this.GetAllSDPAsync(SessionID, null);
        }
        
        public void GetAllSDPAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllSDPDelegate == null)) {
                this.onBeginGetAllSDPDelegate = new BeginOperationDelegate(this.OnBeginGetAllSDP);
            }
            if ((this.onEndGetAllSDPDelegate == null)) {
                this.onEndGetAllSDPDelegate = new EndOperationDelegate(this.OnEndGetAllSDP);
            }
            if ((this.onGetAllSDPCompletedDelegate == null)) {
                this.onGetAllSDPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllSDPCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllSDPDelegate, new object[] {
                        SessionID}, this.onEndGetAllSDPDelegate, this.onGetAllSDPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewSDP(SessionID, sdp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewSDP(System.IAsyncResult result) {
            return base.Channel.EndCreateNewSDP(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewSDP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Pattern sdp = ((myRequirements.ServiceReference1.Pattern)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewSDP(SessionID, sdp, callback, asyncState);
        }
        
        private object[] OnEndCreateNewSDP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewSDP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewSDPCompleted(object state) {
            if ((this.CreateNewSDPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewSDPCompleted(this, new CreateNewSDPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern sdp) {
            this.CreateNewSDPAsync(SessionID, sdp, null);
        }
        
        public void CreateNewSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern sdp, object userState) {
            if ((this.onBeginCreateNewSDPDelegate == null)) {
                this.onBeginCreateNewSDPDelegate = new BeginOperationDelegate(this.OnBeginCreateNewSDP);
            }
            if ((this.onEndCreateNewSDPDelegate == null)) {
                this.onEndCreateNewSDPDelegate = new EndOperationDelegate(this.OnEndCreateNewSDP);
            }
            if ((this.onCreateNewSDPCompletedDelegate == null)) {
                this.onCreateNewSDPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewSDPCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewSDPDelegate, new object[] {
                        SessionID,
                        sdp}, this.onEndCreateNewSDPDelegate, this.onCreateNewSDPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdateSDP(string SessionID, myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSDP(SessionID, pat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdateSDP(System.IAsyncResult result) {
            return base.Channel.EndUpdateSDP(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSDP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat = ((myRequirements.ServiceReference1.Pattern_RequirementAndCategories)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdateSDP(SessionID, pat, callback, asyncState);
        }
        
        private object[] OnEndUpdateSDP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdateSDP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSDPCompleted(object state) {
            if ((this.UpdateSDPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSDPCompleted(this, new UpdateSDPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat) {
            this.UpdateSDPAsync(SessionID, pat, null);
        }
        
        public void UpdateSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat, object userState) {
            if ((this.onBeginUpdateSDPDelegate == null)) {
                this.onBeginUpdateSDPDelegate = new BeginOperationDelegate(this.OnBeginUpdateSDP);
            }
            if ((this.onEndUpdateSDPDelegate == null)) {
                this.onEndUpdateSDPDelegate = new EndOperationDelegate(this.OnEndUpdateSDP);
            }
            if ((this.onUpdateSDPCompletedDelegate == null)) {
                this.onUpdateSDPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSDPCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSDPDelegate, new object[] {
                        SessionID,
                        pat}, this.onEndUpdateSDPDelegate, this.onUpdateSDPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeleteSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSDP(SessionID, sdp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeleteSDP(System.IAsyncResult result) {
            return base.Channel.EndDeleteSDP(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSDP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Pattern sdp = ((myRequirements.ServiceReference1.Pattern)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeleteSDP(SessionID, sdp, callback, asyncState);
        }
        
        private object[] OnEndDeleteSDP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeleteSDP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteSDPCompleted(object state) {
            if ((this.DeleteSDPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSDPCompleted(this, new DeleteSDPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern sdp) {
            this.DeleteSDPAsync(SessionID, sdp, null);
        }
        
        public void DeleteSDPAsync(string SessionID, myRequirements.ServiceReference1.Pattern sdp, object userState) {
            if ((this.onBeginDeleteSDPDelegate == null)) {
                this.onBeginDeleteSDPDelegate = new BeginOperationDelegate(this.OnBeginDeleteSDP);
            }
            if ((this.onEndDeleteSDPDelegate == null)) {
                this.onEndDeleteSDPDelegate = new EndOperationDelegate(this.OnEndDeleteSDP);
            }
            if ((this.onDeleteSDPCompletedDelegate == null)) {
                this.onDeleteSDPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSDPCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSDPDelegate, new object[] {
                        SessionID,
                        sdp}, this.onEndDeleteSDPDelegate, this.onDeleteSDPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginGetAllCategories(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCategories(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> myRequirements.ServiceReference1.WebService.EndGetAllCategories(System.IAsyncResult result) {
            return base.Channel.EndGetAllCategories(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCategories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginGetAllCategories(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllCategories(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndGetAllCategories(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCategoriesCompleted(object state) {
            if ((this.GetAllCategoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCategoriesCompleted(this, new GetAllCategoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCategoriesAsync(string SessionID) {
            this.GetAllCategoriesAsync(SessionID, null);
        }
        
        public void GetAllCategoriesAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllCategoriesDelegate == null)) {
                this.onBeginGetAllCategoriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCategories);
            }
            if ((this.onEndGetAllCategoriesDelegate == null)) {
                this.onEndGetAllCategoriesDelegate = new EndOperationDelegate(this.OnEndGetAllCategories);
            }
            if ((this.onGetAllCategoriesCompletedDelegate == null)) {
                this.onGetAllCategoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCategoriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCategoriesDelegate, new object[] {
                        SessionID}, this.onEndGetAllCategoriesDelegate, this.onGetAllCategoriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewCategorie(SessionID, categorie, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewCategorie(System.IAsyncResult result) {
            return base.Channel.EndCreateNewCategorie(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewCategorie(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Categorie categorie = ((myRequirements.ServiceReference1.Categorie)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewCategorie(SessionID, categorie, callback, asyncState);
        }
        
        private object[] OnEndCreateNewCategorie(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewCategorie(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewCategorieCompleted(object state) {
            if ((this.CreateNewCategorieCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewCategorieCompleted(this, new CreateNewCategorieCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categorie categorie) {
            this.CreateNewCategorieAsync(SessionID, categorie, null);
        }
        
        public void CreateNewCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categorie categorie, object userState) {
            if ((this.onBeginCreateNewCategorieDelegate == null)) {
                this.onBeginCreateNewCategorieDelegate = new BeginOperationDelegate(this.OnBeginCreateNewCategorie);
            }
            if ((this.onEndCreateNewCategorieDelegate == null)) {
                this.onEndCreateNewCategorieDelegate = new EndOperationDelegate(this.OnEndCreateNewCategorie);
            }
            if ((this.onCreateNewCategorieCompletedDelegate == null)) {
                this.onCreateNewCategorieCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewCategorieCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewCategorieDelegate, new object[] {
                        SessionID,
                        categorie}, this.onEndCreateNewCategorieDelegate, this.onCreateNewCategorieCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdateCategorie(string SessionID, myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCategorie(SessionID, catRel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdateCategorie(System.IAsyncResult result) {
            return base.Channel.EndUpdateCategorie(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCategorie(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel = ((myRequirements.ServiceReference1.Categories_RequirementsAndPatterns)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdateCategorie(SessionID, catRel, callback, asyncState);
        }
        
        private object[] OnEndUpdateCategorie(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdateCategorie(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCategorieCompleted(object state) {
            if ((this.UpdateCategorieCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCategorieCompleted(this, new UpdateCategorieCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel) {
            this.UpdateCategorieAsync(SessionID, catRel, null);
        }
        
        public void UpdateCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel, object userState) {
            if ((this.onBeginUpdateCategorieDelegate == null)) {
                this.onBeginUpdateCategorieDelegate = new BeginOperationDelegate(this.OnBeginUpdateCategorie);
            }
            if ((this.onEndUpdateCategorieDelegate == null)) {
                this.onEndUpdateCategorieDelegate = new EndOperationDelegate(this.OnEndUpdateCategorie);
            }
            if ((this.onUpdateCategorieCompletedDelegate == null)) {
                this.onUpdateCategorieCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCategorieCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCategorieDelegate, new object[] {
                        SessionID,
                        catRel}, this.onEndUpdateCategorieDelegate, this.onUpdateCategorieCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeleteCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCategorie(SessionID, categorie, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeleteCategorie(System.IAsyncResult result) {
            return base.Channel.EndDeleteCategorie(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCategorie(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Categorie categorie = ((myRequirements.ServiceReference1.Categorie)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeleteCategorie(SessionID, categorie, callback, asyncState);
        }
        
        private object[] OnEndDeleteCategorie(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeleteCategorie(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCategorieCompleted(object state) {
            if ((this.DeleteCategorieCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCategorieCompleted(this, new DeleteCategorieCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categorie categorie) {
            this.DeleteCategorieAsync(SessionID, categorie, null);
        }
        
        public void DeleteCategorieAsync(string SessionID, myRequirements.ServiceReference1.Categorie categorie, object userState) {
            if ((this.onBeginDeleteCategorieDelegate == null)) {
                this.onBeginDeleteCategorieDelegate = new BeginOperationDelegate(this.OnBeginDeleteCategorie);
            }
            if ((this.onEndDeleteCategorieDelegate == null)) {
                this.onEndDeleteCategorieDelegate = new EndOperationDelegate(this.OnEndDeleteCategorie);
            }
            if ((this.onDeleteCategorieCompletedDelegate == null)) {
                this.onDeleteCategorieCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCategorieCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCategorieDelegate, new object[] {
                        SessionID,
                        categorie}, this.onEndDeleteCategorieDelegate, this.onDeleteCategorieCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddPatternAndRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddPatternAndRequirementRelation(SessionID, reqID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddPatternAndRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndaddPatternAndRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginaddPatternAndRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int reqID = ((int)(inValues[1]));
            int patternID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddPatternAndRequirementRelation(SessionID, reqID, patternID, callback, asyncState);
        }
        
        private object[] OnEndaddPatternAndRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddPatternAndRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddPatternAndRequirementRelationCompleted(object state) {
            if ((this.addPatternAndRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addPatternAndRequirementRelationCompleted(this, new addPatternAndRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addPatternAndRequirementRelationAsync(string SessionID, int reqID, int patternID) {
            this.addPatternAndRequirementRelationAsync(SessionID, reqID, patternID, null);
        }
        
        public void addPatternAndRequirementRelationAsync(string SessionID, int reqID, int patternID, object userState) {
            if ((this.onBeginaddPatternAndRequirementRelationDelegate == null)) {
                this.onBeginaddPatternAndRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginaddPatternAndRequirementRelation);
            }
            if ((this.onEndaddPatternAndRequirementRelationDelegate == null)) {
                this.onEndaddPatternAndRequirementRelationDelegate = new EndOperationDelegate(this.OnEndaddPatternAndRequirementRelation);
            }
            if ((this.onaddPatternAndRequirementRelationCompletedDelegate == null)) {
                this.onaddPatternAndRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddPatternAndRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginaddPatternAndRequirementRelationDelegate, new object[] {
                        SessionID,
                        reqID,
                        patternID}, this.onEndaddPatternAndRequirementRelationDelegate, this.onaddPatternAndRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddPatternAndPrivateRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddPatternAndPrivateRequirementRelation(SessionID, reqID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddPatternAndPrivateRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndaddPatternAndPrivateRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginaddPatternAndPrivateRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int reqID = ((int)(inValues[1]));
            int patternID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddPatternAndPrivateRequirementRelation(SessionID, reqID, patternID, callback, asyncState);
        }
        
        private object[] OnEndaddPatternAndPrivateRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddPatternAndPrivateRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddPatternAndPrivateRequirementRelationCompleted(object state) {
            if ((this.addPatternAndPrivateRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addPatternAndPrivateRequirementRelationCompleted(this, new addPatternAndPrivateRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addPatternAndPrivateRequirementRelationAsync(string SessionID, int reqID, int patternID) {
            this.addPatternAndPrivateRequirementRelationAsync(SessionID, reqID, patternID, null);
        }
        
        public void addPatternAndPrivateRequirementRelationAsync(string SessionID, int reqID, int patternID, object userState) {
            if ((this.onBeginaddPatternAndPrivateRequirementRelationDelegate == null)) {
                this.onBeginaddPatternAndPrivateRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginaddPatternAndPrivateRequirementRelation);
            }
            if ((this.onEndaddPatternAndPrivateRequirementRelationDelegate == null)) {
                this.onEndaddPatternAndPrivateRequirementRelationDelegate = new EndOperationDelegate(this.OnEndaddPatternAndPrivateRequirementRelation);
            }
            if ((this.onaddPatternAndPrivateRequirementRelationCompletedDelegate == null)) {
                this.onaddPatternAndPrivateRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddPatternAndPrivateRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginaddPatternAndPrivateRequirementRelationDelegate, new object[] {
                        SessionID,
                        reqID,
                        patternID}, this.onEndaddPatternAndPrivateRequirementRelationDelegate, this.onaddPatternAndPrivateRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremovePatternandRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremovePatternandRequirementRelation(SessionID, patternID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremovePatternandRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndremovePatternandRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginremovePatternandRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patternID = ((int)(inValues[1]));
            int requirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremovePatternandRequirementRelation(SessionID, patternID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndremovePatternandRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremovePatternandRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremovePatternandRequirementRelationCompleted(object state) {
            if ((this.removePatternandRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removePatternandRequirementRelationCompleted(this, new removePatternandRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removePatternandRequirementRelationAsync(string SessionID, int patternID, int requirementID) {
            this.removePatternandRequirementRelationAsync(SessionID, patternID, requirementID, null);
        }
        
        public void removePatternandRequirementRelationAsync(string SessionID, int patternID, int requirementID, object userState) {
            if ((this.onBeginremovePatternandRequirementRelationDelegate == null)) {
                this.onBeginremovePatternandRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginremovePatternandRequirementRelation);
            }
            if ((this.onEndremovePatternandRequirementRelationDelegate == null)) {
                this.onEndremovePatternandRequirementRelationDelegate = new EndOperationDelegate(this.OnEndremovePatternandRequirementRelation);
            }
            if ((this.onremovePatternandRequirementRelationCompletedDelegate == null)) {
                this.onremovePatternandRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremovePatternandRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginremovePatternandRequirementRelationDelegate, new object[] {
                        SessionID,
                        patternID,
                        requirementID}, this.onEndremovePatternandRequirementRelationDelegate, this.onremovePatternandRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremovePatternandPrivateRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremovePatternandPrivateRequirementRelation(SessionID, patternID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremovePatternandPrivateRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndremovePatternandPrivateRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginremovePatternandPrivateRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patternID = ((int)(inValues[1]));
            int requirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremovePatternandPrivateRequirementRelation(SessionID, patternID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndremovePatternandPrivateRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremovePatternandPrivateRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremovePatternandPrivateRequirementRelationCompleted(object state) {
            if ((this.removePatternandPrivateRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removePatternandPrivateRequirementRelationCompleted(this, new removePatternandPrivateRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removePatternandPrivateRequirementRelationAsync(string SessionID, int patternID, int requirementID) {
            this.removePatternandPrivateRequirementRelationAsync(SessionID, patternID, requirementID, null);
        }
        
        public void removePatternandPrivateRequirementRelationAsync(string SessionID, int patternID, int requirementID, object userState) {
            if ((this.onBeginremovePatternandPrivateRequirementRelationDelegate == null)) {
                this.onBeginremovePatternandPrivateRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginremovePatternandPrivateRequirementRelation);
            }
            if ((this.onEndremovePatternandPrivateRequirementRelationDelegate == null)) {
                this.onEndremovePatternandPrivateRequirementRelationDelegate = new EndOperationDelegate(this.OnEndremovePatternandPrivateRequirementRelation);
            }
            if ((this.onremovePatternandPrivateRequirementRelationCompletedDelegate == null)) {
                this.onremovePatternandPrivateRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremovePatternandPrivateRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginremovePatternandPrivateRequirementRelationDelegate, new object[] {
                        SessionID,
                        patternID,
                        requirementID}, this.onEndremovePatternandPrivateRequirementRelationDelegate, this.onremovePatternandPrivateRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddCategoryAndRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddCategoryAndRequirementRelation(SessionID, reqID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddCategoryAndRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndaddCategoryAndRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginaddCategoryAndRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int reqID = ((int)(inValues[1]));
            int categoryID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddCategoryAndRequirementRelation(SessionID, reqID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndaddCategoryAndRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddCategoryAndRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddCategoryAndRequirementRelationCompleted(object state) {
            if ((this.addCategoryAndRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addCategoryAndRequirementRelationCompleted(this, new addCategoryAndRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addCategoryAndRequirementRelationAsync(string SessionID, int reqID, int categoryID) {
            this.addCategoryAndRequirementRelationAsync(SessionID, reqID, categoryID, null);
        }
        
        public void addCategoryAndRequirementRelationAsync(string SessionID, int reqID, int categoryID, object userState) {
            if ((this.onBeginaddCategoryAndRequirementRelationDelegate == null)) {
                this.onBeginaddCategoryAndRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginaddCategoryAndRequirementRelation);
            }
            if ((this.onEndaddCategoryAndRequirementRelationDelegate == null)) {
                this.onEndaddCategoryAndRequirementRelationDelegate = new EndOperationDelegate(this.OnEndaddCategoryAndRequirementRelation);
            }
            if ((this.onaddCategoryAndRequirementRelationCompletedDelegate == null)) {
                this.onaddCategoryAndRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddCategoryAndRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginaddCategoryAndRequirementRelationDelegate, new object[] {
                        SessionID,
                        reqID,
                        categoryID}, this.onEndaddCategoryAndRequirementRelationDelegate, this.onaddCategoryAndRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddCategoryAndPrivateRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddCategoryAndPrivateRequirementRelation(SessionID, reqID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndaddCategoryAndPrivateRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginaddCategoryAndPrivateRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int reqID = ((int)(inValues[1]));
            int categoryID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddCategoryAndPrivateRequirementRelation(SessionID, reqID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndaddCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddCategoryAndPrivateRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddCategoryAndPrivateRequirementRelationCompleted(object state) {
            if ((this.addCategoryAndPrivateRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addCategoryAndPrivateRequirementRelationCompleted(this, new addCategoryAndPrivateRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addCategoryAndPrivateRequirementRelationAsync(string SessionID, int reqID, int categoryID) {
            this.addCategoryAndPrivateRequirementRelationAsync(SessionID, reqID, categoryID, null);
        }
        
        public void addCategoryAndPrivateRequirementRelationAsync(string SessionID, int reqID, int categoryID, object userState) {
            if ((this.onBeginaddCategoryAndPrivateRequirementRelationDelegate == null)) {
                this.onBeginaddCategoryAndPrivateRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginaddCategoryAndPrivateRequirementRelation);
            }
            if ((this.onEndaddCategoryAndPrivateRequirementRelationDelegate == null)) {
                this.onEndaddCategoryAndPrivateRequirementRelationDelegate = new EndOperationDelegate(this.OnEndaddCategoryAndPrivateRequirementRelation);
            }
            if ((this.onaddCategoryAndPrivateRequirementRelationCompletedDelegate == null)) {
                this.onaddCategoryAndPrivateRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddCategoryAndPrivateRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginaddCategoryAndPrivateRequirementRelationDelegate, new object[] {
                        SessionID,
                        reqID,
                        categoryID}, this.onEndaddCategoryAndPrivateRequirementRelationDelegate, this.onaddCategoryAndPrivateRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremoveCategoryAndRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveCategoryAndRequirementRelation(SessionID, categoryID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremoveCategoryAndRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndremoveCategoryAndRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginremoveCategoryAndRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            int requirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremoveCategoryAndRequirementRelation(SessionID, categoryID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndremoveCategoryAndRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremoveCategoryAndRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveCategoryAndRequirementRelationCompleted(object state) {
            if ((this.removeCategoryAndRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeCategoryAndRequirementRelationCompleted(this, new removeCategoryAndRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeCategoryAndRequirementRelationAsync(string SessionID, int categoryID, int requirementID) {
            this.removeCategoryAndRequirementRelationAsync(SessionID, categoryID, requirementID, null);
        }
        
        public void removeCategoryAndRequirementRelationAsync(string SessionID, int categoryID, int requirementID, object userState) {
            if ((this.onBeginremoveCategoryAndRequirementRelationDelegate == null)) {
                this.onBeginremoveCategoryAndRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginremoveCategoryAndRequirementRelation);
            }
            if ((this.onEndremoveCategoryAndRequirementRelationDelegate == null)) {
                this.onEndremoveCategoryAndRequirementRelationDelegate = new EndOperationDelegate(this.OnEndremoveCategoryAndRequirementRelation);
            }
            if ((this.onremoveCategoryAndRequirementRelationCompletedDelegate == null)) {
                this.onremoveCategoryAndRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveCategoryAndRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginremoveCategoryAndRequirementRelationDelegate, new object[] {
                        SessionID,
                        categoryID,
                        requirementID}, this.onEndremoveCategoryAndRequirementRelationDelegate, this.onremoveCategoryAndRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremoveCategoryAndPrivateRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveCategoryAndPrivateRequirementRelation(SessionID, categoryID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremoveCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
            return base.Channel.EndremoveCategoryAndPrivateRequirementRelation(result);
        }
        
        private System.IAsyncResult OnBeginremoveCategoryAndPrivateRequirementRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            int requirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremoveCategoryAndPrivateRequirementRelation(SessionID, categoryID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndremoveCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremoveCategoryAndPrivateRequirementRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveCategoryAndPrivateRequirementRelationCompleted(object state) {
            if ((this.removeCategoryAndPrivateRequirementRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeCategoryAndPrivateRequirementRelationCompleted(this, new removeCategoryAndPrivateRequirementRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeCategoryAndPrivateRequirementRelationAsync(string SessionID, int categoryID, int requirementID) {
            this.removeCategoryAndPrivateRequirementRelationAsync(SessionID, categoryID, requirementID, null);
        }
        
        public void removeCategoryAndPrivateRequirementRelationAsync(string SessionID, int categoryID, int requirementID, object userState) {
            if ((this.onBeginremoveCategoryAndPrivateRequirementRelationDelegate == null)) {
                this.onBeginremoveCategoryAndPrivateRequirementRelationDelegate = new BeginOperationDelegate(this.OnBeginremoveCategoryAndPrivateRequirementRelation);
            }
            if ((this.onEndremoveCategoryAndPrivateRequirementRelationDelegate == null)) {
                this.onEndremoveCategoryAndPrivateRequirementRelationDelegate = new EndOperationDelegate(this.OnEndremoveCategoryAndPrivateRequirementRelation);
            }
            if ((this.onremoveCategoryAndPrivateRequirementRelationCompletedDelegate == null)) {
                this.onremoveCategoryAndPrivateRequirementRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveCategoryAndPrivateRequirementRelationCompleted);
            }
            base.InvokeAsync(this.onBeginremoveCategoryAndPrivateRequirementRelationDelegate, new object[] {
                        SessionID,
                        categoryID,
                        requirementID}, this.onEndremoveCategoryAndPrivateRequirementRelationDelegate, this.onremoveCategoryAndPrivateRequirementRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddNewRequirementExampleByRequirmentID(string SessionID, int reqID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddNewRequirementExampleByRequirmentID(SessionID, reqID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddNewRequirementExampleByRequirmentID(System.IAsyncResult result) {
            return base.Channel.EndaddNewRequirementExampleByRequirmentID(result);
        }
        
        private System.IAsyncResult OnBeginaddNewRequirementExampleByRequirmentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int reqID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddNewRequirementExampleByRequirmentID(SessionID, reqID, callback, asyncState);
        }
        
        private object[] OnEndaddNewRequirementExampleByRequirmentID(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddNewRequirementExampleByRequirmentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddNewRequirementExampleByRequirmentIDCompleted(object state) {
            if ((this.addNewRequirementExampleByRequirmentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addNewRequirementExampleByRequirmentIDCompleted(this, new addNewRequirementExampleByRequirmentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addNewRequirementExampleByRequirmentIDAsync(string SessionID, int reqID) {
            this.addNewRequirementExampleByRequirmentIDAsync(SessionID, reqID, null);
        }
        
        public void addNewRequirementExampleByRequirmentIDAsync(string SessionID, int reqID, object userState) {
            if ((this.onBeginaddNewRequirementExampleByRequirmentIDDelegate == null)) {
                this.onBeginaddNewRequirementExampleByRequirmentIDDelegate = new BeginOperationDelegate(this.OnBeginaddNewRequirementExampleByRequirmentID);
            }
            if ((this.onEndaddNewRequirementExampleByRequirmentIDDelegate == null)) {
                this.onEndaddNewRequirementExampleByRequirmentIDDelegate = new EndOperationDelegate(this.OnEndaddNewRequirementExampleByRequirmentID);
            }
            if ((this.onaddNewRequirementExampleByRequirmentIDCompletedDelegate == null)) {
                this.onaddNewRequirementExampleByRequirmentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddNewRequirementExampleByRequirmentIDCompleted);
            }
            base.InvokeAsync(this.onBeginaddNewRequirementExampleByRequirmentIDDelegate, new object[] {
                        SessionID,
                        reqID}, this.onEndaddNewRequirementExampleByRequirmentIDDelegate, this.onaddNewRequirementExampleByRequirmentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremoveRequirementExampleByRequirementID(string SessionID, int requirementID, int exampleID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveRequirementExampleByRequirementID(SessionID, requirementID, exampleID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremoveRequirementExampleByRequirementID(System.IAsyncResult result) {
            return base.Channel.EndremoveRequirementExampleByRequirementID(result);
        }
        
        private System.IAsyncResult OnBeginremoveRequirementExampleByRequirementID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int requirementID = ((int)(inValues[1]));
            int exampleID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremoveRequirementExampleByRequirementID(SessionID, requirementID, exampleID, callback, asyncState);
        }
        
        private object[] OnEndremoveRequirementExampleByRequirementID(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremoveRequirementExampleByRequirementID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveRequirementExampleByRequirementIDCompleted(object state) {
            if ((this.removeRequirementExampleByRequirementIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeRequirementExampleByRequirementIDCompleted(this, new removeRequirementExampleByRequirementIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeRequirementExampleByRequirementIDAsync(string SessionID, int requirementID, int exampleID) {
            this.removeRequirementExampleByRequirementIDAsync(SessionID, requirementID, exampleID, null);
        }
        
        public void removeRequirementExampleByRequirementIDAsync(string SessionID, int requirementID, int exampleID, object userState) {
            if ((this.onBeginremoveRequirementExampleByRequirementIDDelegate == null)) {
                this.onBeginremoveRequirementExampleByRequirementIDDelegate = new BeginOperationDelegate(this.OnBeginremoveRequirementExampleByRequirementID);
            }
            if ((this.onEndremoveRequirementExampleByRequirementIDDelegate == null)) {
                this.onEndremoveRequirementExampleByRequirementIDDelegate = new EndOperationDelegate(this.OnEndremoveRequirementExampleByRequirementID);
            }
            if ((this.onremoveRequirementExampleByRequirementIDCompletedDelegate == null)) {
                this.onremoveRequirementExampleByRequirementIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveRequirementExampleByRequirementIDCompleted);
            }
            base.InvokeAsync(this.onBeginremoveRequirementExampleByRequirementIDDelegate, new object[] {
                        SessionID,
                        requirementID,
                        exampleID}, this.onEndremoveRequirementExampleByRequirementIDDelegate, this.onremoveRequirementExampleByRequirementIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginaddCategoryAndDesignRelation(string SessionID, int patID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddCategoryAndDesignRelation(SessionID, patID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndaddCategoryAndDesignRelation(System.IAsyncResult result) {
            return base.Channel.EndaddCategoryAndDesignRelation(result);
        }
        
        private System.IAsyncResult OnBeginaddCategoryAndDesignRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patID = ((int)(inValues[1]));
            int categoryID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginaddCategoryAndDesignRelation(SessionID, patID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndaddCategoryAndDesignRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndaddCategoryAndDesignRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddCategoryAndDesignRelationCompleted(object state) {
            if ((this.addCategoryAndDesignRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addCategoryAndDesignRelationCompleted(this, new addCategoryAndDesignRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addCategoryAndDesignRelationAsync(string SessionID, int patID, int categoryID) {
            this.addCategoryAndDesignRelationAsync(SessionID, patID, categoryID, null);
        }
        
        public void addCategoryAndDesignRelationAsync(string SessionID, int patID, int categoryID, object userState) {
            if ((this.onBeginaddCategoryAndDesignRelationDelegate == null)) {
                this.onBeginaddCategoryAndDesignRelationDelegate = new BeginOperationDelegate(this.OnBeginaddCategoryAndDesignRelation);
            }
            if ((this.onEndaddCategoryAndDesignRelationDelegate == null)) {
                this.onEndaddCategoryAndDesignRelationDelegate = new EndOperationDelegate(this.OnEndaddCategoryAndDesignRelation);
            }
            if ((this.onaddCategoryAndDesignRelationCompletedDelegate == null)) {
                this.onaddCategoryAndDesignRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddCategoryAndDesignRelationCompleted);
            }
            base.InvokeAsync(this.onBeginaddCategoryAndDesignRelationDelegate, new object[] {
                        SessionID,
                        patID,
                        categoryID}, this.onEndaddCategoryAndDesignRelationDelegate, this.onaddCategoryAndDesignRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginremoveCategoryAndPatternRelation(string SessionID, int categoryID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveCategoryAndPatternRelation(SessionID, categoryID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndremoveCategoryAndPatternRelation(System.IAsyncResult result) {
            return base.Channel.EndremoveCategoryAndPatternRelation(result);
        }
        
        private System.IAsyncResult OnBeginremoveCategoryAndPatternRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            int patternID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginremoveCategoryAndPatternRelation(SessionID, categoryID, patternID, callback, asyncState);
        }
        
        private object[] OnEndremoveCategoryAndPatternRelation(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndremoveCategoryAndPatternRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveCategoryAndPatternRelationCompleted(object state) {
            if ((this.removeCategoryAndPatternRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeCategoryAndPatternRelationCompleted(this, new removeCategoryAndPatternRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeCategoryAndPatternRelationAsync(string SessionID, int categoryID, int patternID) {
            this.removeCategoryAndPatternRelationAsync(SessionID, categoryID, patternID, null);
        }
        
        public void removeCategoryAndPatternRelationAsync(string SessionID, int categoryID, int patternID, object userState) {
            if ((this.onBeginremoveCategoryAndPatternRelationDelegate == null)) {
                this.onBeginremoveCategoryAndPatternRelationDelegate = new BeginOperationDelegate(this.OnBeginremoveCategoryAndPatternRelation);
            }
            if ((this.onEndremoveCategoryAndPatternRelationDelegate == null)) {
                this.onEndremoveCategoryAndPatternRelationDelegate = new EndOperationDelegate(this.OnEndremoveCategoryAndPatternRelation);
            }
            if ((this.onremoveCategoryAndPatternRelationCompletedDelegate == null)) {
                this.onremoveCategoryAndPatternRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveCategoryAndPatternRelationCompleted);
            }
            base.InvokeAsync(this.onBeginremoveCategoryAndPatternRelationDelegate, new object[] {
                        SessionID,
                        categoryID,
                        patternID}, this.onEndremoveCategoryAndPatternRelationDelegate, this.onremoveCategoryAndPatternRelationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndRequirementRelationsBycategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndRequirementRelationsBycategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> myRequirements.ServiceReference1.WebService.EndgetCategoryAndRequirementRelationsBycategoryID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndRequirementRelationsBycategoryID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndRequirementRelationsBycategoryID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndRequirementRelationsBycategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndRequirementRelationsBycategoryID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndRequirementRelationsBycategoryID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndRequirementRelationsBycategoryIDCompleted(object state) {
            if ((this.getCategoryAndRequirementRelationsBycategoryIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndRequirementRelationsBycategoryIDCompleted(this, new getCategoryAndRequirementRelationsBycategoryIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndRequirementRelationsBycategoryIDAsync(string SessionID, int categoryID) {
            this.getCategoryAndRequirementRelationsBycategoryIDAsync(SessionID, categoryID, null);
        }
        
        public void getCategoryAndRequirementRelationsBycategoryIDAsync(string SessionID, int categoryID, object userState) {
            if ((this.onBegingetCategoryAndRequirementRelationsBycategoryIDDelegate == null)) {
                this.onBegingetCategoryAndRequirementRelationsBycategoryIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndRequirementRelationsBycategoryID);
            }
            if ((this.onEndgetCategoryAndRequirementRelationsBycategoryIDDelegate == null)) {
                this.onEndgetCategoryAndRequirementRelationsBycategoryIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndRequirementRelationsBycategoryID);
            }
            if ((this.ongetCategoryAndRequirementRelationsBycategoryIDCompletedDelegate == null)) {
                this.ongetCategoryAndRequirementRelationsBycategoryIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndRequirementRelationsBycategoryIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndRequirementRelationsBycategoryIDDelegate, new object[] {
                        SessionID,
                        categoryID}, this.onEndgetCategoryAndRequirementRelationsBycategoryIDDelegate, this.ongetCategoryAndRequirementRelationsBycategoryIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndRequirementRelationsByRequirementID(SessionID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> myRequirements.ServiceReference1.WebService.EndgetCategoryAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndRequirementRelationsByRequirementID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndRequirementRelationsByRequirementID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int requirementID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndRequirementRelationsByRequirementID(SessionID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndRequirementRelationsByRequirementID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndRequirementRelationsByRequirementIDCompleted(object state) {
            if ((this.getCategoryAndRequirementRelationsByRequirementIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndRequirementRelationsByRequirementIDCompleted(this, new getCategoryAndRequirementRelationsByRequirementIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndRequirementRelationsByRequirementIDAsync(string SessionID, int requirementID) {
            this.getCategoryAndRequirementRelationsByRequirementIDAsync(SessionID, requirementID, null);
        }
        
        public void getCategoryAndRequirementRelationsByRequirementIDAsync(string SessionID, int requirementID, object userState) {
            if ((this.onBegingetCategoryAndRequirementRelationsByRequirementIDDelegate == null)) {
                this.onBegingetCategoryAndRequirementRelationsByRequirementIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndRequirementRelationsByRequirementID);
            }
            if ((this.onEndgetCategoryAndRequirementRelationsByRequirementIDDelegate == null)) {
                this.onEndgetCategoryAndRequirementRelationsByRequirementIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndRequirementRelationsByRequirementID);
            }
            if ((this.ongetCategoryAndRequirementRelationsByRequirementIDCompletedDelegate == null)) {
                this.ongetCategoryAndRequirementRelationsByRequirementIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndRequirementRelationsByRequirementIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndRequirementRelationsByRequirementIDDelegate, new object[] {
                        SessionID,
                        requirementID}, this.onEndgetCategoryAndRequirementRelationsByRequirementIDDelegate, this.ongetCategoryAndRequirementRelationsByRequirementIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndPattnerRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndPattnerRelationsByCategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> myRequirements.ServiceReference1.WebService.EndgetCategoryAndPattnerRelationsByCategoryID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndPattnerRelationsByCategoryID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndPattnerRelationsByCategoryID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndPattnerRelationsByCategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndPattnerRelationsByCategoryID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndPattnerRelationsByCategoryID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndPattnerRelationsByCategoryIDCompleted(object state) {
            if ((this.getCategoryAndPattnerRelationsByCategoryIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndPattnerRelationsByCategoryIDCompleted(this, new getCategoryAndPattnerRelationsByCategoryIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndPattnerRelationsByCategoryIDAsync(string SessionID, int categoryID) {
            this.getCategoryAndPattnerRelationsByCategoryIDAsync(SessionID, categoryID, null);
        }
        
        public void getCategoryAndPattnerRelationsByCategoryIDAsync(string SessionID, int categoryID, object userState) {
            if ((this.onBegingetCategoryAndPattnerRelationsByCategoryIDDelegate == null)) {
                this.onBegingetCategoryAndPattnerRelationsByCategoryIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndPattnerRelationsByCategoryID);
            }
            if ((this.onEndgetCategoryAndPattnerRelationsByCategoryIDDelegate == null)) {
                this.onEndgetCategoryAndPattnerRelationsByCategoryIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndPattnerRelationsByCategoryID);
            }
            if ((this.ongetCategoryAndPattnerRelationsByCategoryIDCompletedDelegate == null)) {
                this.ongetCategoryAndPattnerRelationsByCategoryIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndPattnerRelationsByCategoryIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndPattnerRelationsByCategoryIDDelegate, new object[] {
                        SessionID,
                        categoryID}, this.onEndgetCategoryAndPattnerRelationsByCategoryIDDelegate, this.ongetCategoryAndPattnerRelationsByCategoryIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndPattnerRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndPattnerRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> myRequirements.ServiceReference1.WebService.EndgetCategoryAndPattnerRelationsByPatternID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndPattnerRelationsByPatternID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndPattnerRelationsByPatternID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patternID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndPattnerRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndPattnerRelationsByPatternID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndPattnerRelationsByPatternID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndPattnerRelationsByPatternIDCompleted(object state) {
            if ((this.getCategoryAndPattnerRelationsByPatternIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndPattnerRelationsByPatternIDCompleted(this, new getCategoryAndPattnerRelationsByPatternIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndPattnerRelationsByPatternIDAsync(string SessionID, int patternID) {
            this.getCategoryAndPattnerRelationsByPatternIDAsync(SessionID, patternID, null);
        }
        
        public void getCategoryAndPattnerRelationsByPatternIDAsync(string SessionID, int patternID, object userState) {
            if ((this.onBegingetCategoryAndPattnerRelationsByPatternIDDelegate == null)) {
                this.onBegingetCategoryAndPattnerRelationsByPatternIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndPattnerRelationsByPatternID);
            }
            if ((this.onEndgetCategoryAndPattnerRelationsByPatternIDDelegate == null)) {
                this.onEndgetCategoryAndPattnerRelationsByPatternIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndPattnerRelationsByPatternID);
            }
            if ((this.ongetCategoryAndPattnerRelationsByPatternIDCompletedDelegate == null)) {
                this.ongetCategoryAndPattnerRelationsByPatternIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndPattnerRelationsByPatternIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndPattnerRelationsByPatternIDDelegate, new object[] {
                        SessionID,
                        patternID}, this.onEndgetCategoryAndPattnerRelationsByPatternIDDelegate, this.ongetCategoryAndPattnerRelationsByPatternIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetPatternAndRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPatternAndRequirementRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> myRequirements.ServiceReference1.WebService.EndgetPatternAndRequirementRelationsByPatternID(System.IAsyncResult result) {
            return base.Channel.EndgetPatternAndRequirementRelationsByPatternID(result);
        }
        
        private System.IAsyncResult OnBegingetPatternAndRequirementRelationsByPatternID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patternID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetPatternAndRequirementRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        private object[] OnEndgetPatternAndRequirementRelationsByPatternID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetPatternAndRequirementRelationsByPatternID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPatternAndRequirementRelationsByPatternIDCompleted(object state) {
            if ((this.getPatternAndRequirementRelationsByPatternIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPatternAndRequirementRelationsByPatternIDCompleted(this, new getPatternAndRequirementRelationsByPatternIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPatternAndRequirementRelationsByPatternIDAsync(string SessionID, int patternID) {
            this.getPatternAndRequirementRelationsByPatternIDAsync(SessionID, patternID, null);
        }
        
        public void getPatternAndRequirementRelationsByPatternIDAsync(string SessionID, int patternID, object userState) {
            if ((this.onBegingetPatternAndRequirementRelationsByPatternIDDelegate == null)) {
                this.onBegingetPatternAndRequirementRelationsByPatternIDDelegate = new BeginOperationDelegate(this.OnBegingetPatternAndRequirementRelationsByPatternID);
            }
            if ((this.onEndgetPatternAndRequirementRelationsByPatternIDDelegate == null)) {
                this.onEndgetPatternAndRequirementRelationsByPatternIDDelegate = new EndOperationDelegate(this.OnEndgetPatternAndRequirementRelationsByPatternID);
            }
            if ((this.ongetPatternAndRequirementRelationsByPatternIDCompletedDelegate == null)) {
                this.ongetPatternAndRequirementRelationsByPatternIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPatternAndRequirementRelationsByPatternIDCompleted);
            }
            base.InvokeAsync(this.onBegingetPatternAndRequirementRelationsByPatternIDDelegate, new object[] {
                        SessionID,
                        patternID}, this.onEndgetPatternAndRequirementRelationsByPatternIDDelegate, this.ongetPatternAndRequirementRelationsByPatternIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetPatternAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPatternAndRequirementRelationsByRequirementID(SessionID, requirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> myRequirements.ServiceReference1.WebService.EndgetPatternAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
            return base.Channel.EndgetPatternAndRequirementRelationsByRequirementID(result);
        }
        
        private System.IAsyncResult OnBegingetPatternAndRequirementRelationsByRequirementID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int requirementID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetPatternAndRequirementRelationsByRequirementID(SessionID, requirementID, callback, asyncState);
        }
        
        private object[] OnEndgetPatternAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetPatternAndRequirementRelationsByRequirementID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPatternAndRequirementRelationsByRequirementIDCompleted(object state) {
            if ((this.getPatternAndRequirementRelationsByRequirementIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPatternAndRequirementRelationsByRequirementIDCompleted(this, new getPatternAndRequirementRelationsByRequirementIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPatternAndRequirementRelationsByRequirementIDAsync(string SessionID, int requirementID) {
            this.getPatternAndRequirementRelationsByRequirementIDAsync(SessionID, requirementID, null);
        }
        
        public void getPatternAndRequirementRelationsByRequirementIDAsync(string SessionID, int requirementID, object userState) {
            if ((this.onBegingetPatternAndRequirementRelationsByRequirementIDDelegate == null)) {
                this.onBegingetPatternAndRequirementRelationsByRequirementIDDelegate = new BeginOperationDelegate(this.OnBegingetPatternAndRequirementRelationsByRequirementID);
            }
            if ((this.onEndgetPatternAndRequirementRelationsByRequirementIDDelegate == null)) {
                this.onEndgetPatternAndRequirementRelationsByRequirementIDDelegate = new EndOperationDelegate(this.OnEndgetPatternAndRequirementRelationsByRequirementID);
            }
            if ((this.ongetPatternAndRequirementRelationsByRequirementIDCompletedDelegate == null)) {
                this.ongetPatternAndRequirementRelationsByRequirementIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPatternAndRequirementRelationsByRequirementIDCompleted);
            }
            base.InvokeAsync(this.onBegingetPatternAndRequirementRelationsByRequirementIDDelegate, new object[] {
                        SessionID,
                        requirementID}, this.onEndgetPatternAndRequirementRelationsByRequirementIDDelegate, this.ongetPatternAndRequirementRelationsByRequirementIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetPatternAndPrivateRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPatternAndPrivateRequirementRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> myRequirements.ServiceReference1.WebService.EndgetPatternAndPrivateRequirementRelationsByPatternID(System.IAsyncResult result) {
            return base.Channel.EndgetPatternAndPrivateRequirementRelationsByPatternID(result);
        }
        
        private System.IAsyncResult OnBegingetPatternAndPrivateRequirementRelationsByPatternID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int patternID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetPatternAndPrivateRequirementRelationsByPatternID(SessionID, patternID, callback, asyncState);
        }
        
        private object[] OnEndgetPatternAndPrivateRequirementRelationsByPatternID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetPatternAndPrivateRequirementRelationsByPatternID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPatternAndPrivateRequirementRelationsByPatternIDCompleted(object state) {
            if ((this.getPatternAndPrivateRequirementRelationsByPatternIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPatternAndPrivateRequirementRelationsByPatternIDCompleted(this, new getPatternAndPrivateRequirementRelationsByPatternIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPatternAndPrivateRequirementRelationsByPatternIDAsync(string SessionID, int patternID) {
            this.getPatternAndPrivateRequirementRelationsByPatternIDAsync(SessionID, patternID, null);
        }
        
        public void getPatternAndPrivateRequirementRelationsByPatternIDAsync(string SessionID, int patternID, object userState) {
            if ((this.onBegingetPatternAndPrivateRequirementRelationsByPatternIDDelegate == null)) {
                this.onBegingetPatternAndPrivateRequirementRelationsByPatternIDDelegate = new BeginOperationDelegate(this.OnBegingetPatternAndPrivateRequirementRelationsByPatternID);
            }
            if ((this.onEndgetPatternAndPrivateRequirementRelationsByPatternIDDelegate == null)) {
                this.onEndgetPatternAndPrivateRequirementRelationsByPatternIDDelegate = new EndOperationDelegate(this.OnEndgetPatternAndPrivateRequirementRelationsByPatternID);
            }
            if ((this.ongetPatternAndPrivateRequirementRelationsByPatternIDCompletedDelegate == null)) {
                this.ongetPatternAndPrivateRequirementRelationsByPatternIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPatternAndPrivateRequirementRelationsByPatternIDCompleted);
            }
            base.InvokeAsync(this.onBegingetPatternAndPrivateRequirementRelationsByPatternIDDelegate, new object[] {
                        SessionID,
                        patternID}, this.onEndgetPatternAndPrivateRequirementRelationsByPatternIDDelegate, this.ongetPatternAndPrivateRequirementRelationsByPatternIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(SessionID, privateRequirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> myRequirements.ServiceReference1.WebService.EndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(System.IAsyncResult result) {
            return base.Channel.EndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(result);
        }
        
        private System.IAsyncResult OnBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int privateRequirementID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(SessionID, privateRequirementID, callback, asyncState);
        }
        
        private object[] OnEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompleted(object state) {
            if ((this.getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompleted(this, new getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDAsync(string SessionID, int privateRequirementID) {
            this.getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDAsync(SessionID, privateRequirementID, null);
        }
        
        public void getPatternAndPrivateRequirementRelationsByPrivateRequirmentIDAsync(string SessionID, int privateRequirementID, object userState) {
            if ((this.onBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate == null)) {
                this.onBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate = new BeginOperationDelegate(this.OnBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID);
            }
            if ((this.onEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate == null)) {
                this.onEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate = new EndOperationDelegate(this.OnEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID);
            }
            if ((this.ongetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedDelegate == null)) {
                this.ongetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompleted);
            }
            base.InvokeAsync(this.onBegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate, new object[] {
                        SessionID,
                        privateRequirementID}, this.onEndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDDelegate, this.ongetPatternAndPrivateRequirementRelationsByPrivateRequirmentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndPrivateRequirementRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndPrivateRequirementRelationsByCategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> myRequirements.ServiceReference1.WebService.EndgetCategoryAndPrivateRequirementRelationsByCategoryID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndPrivateRequirementRelationsByCategoryID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndPrivateRequirementRelationsByCategoryID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int categoryID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndPrivateRequirementRelationsByCategoryID(SessionID, categoryID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndPrivateRequirementRelationsByCategoryID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndPrivateRequirementRelationsByCategoryID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndPrivateRequirementRelationsByCategoryIDCompleted(object state) {
            if ((this.getCategoryAndPrivateRequirementRelationsByCategoryIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndPrivateRequirementRelationsByCategoryIDCompleted(this, new getCategoryAndPrivateRequirementRelationsByCategoryIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndPrivateRequirementRelationsByCategoryIDAsync(string SessionID, int categoryID) {
            this.getCategoryAndPrivateRequirementRelationsByCategoryIDAsync(SessionID, categoryID, null);
        }
        
        public void getCategoryAndPrivateRequirementRelationsByCategoryIDAsync(string SessionID, int categoryID, object userState) {
            if ((this.onBegingetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate == null)) {
                this.onBegingetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndPrivateRequirementRelationsByCategoryID);
            }
            if ((this.onEndgetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate == null)) {
                this.onEndgetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndPrivateRequirementRelationsByCategoryID);
            }
            if ((this.ongetCategoryAndPrivateRequirementRelationsByCategoryIDCompletedDelegate == null)) {
                this.ongetCategoryAndPrivateRequirementRelationsByCategoryIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndPrivateRequirementRelationsByCategoryIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate, new object[] {
                        SessionID,
                        categoryID}, this.onEndgetCategoryAndPrivateRequirementRelationsByCategoryIDDelegate, this.ongetCategoryAndPrivateRequirementRelationsByCategoryIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(SessionID, privateRequirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> myRequirements.ServiceReference1.WebService.EndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(System.IAsyncResult result) {
            return base.Channel.EndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(result);
        }
        
        private System.IAsyncResult OnBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int privateRequirementID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(SessionID, privateRequirementID, callback, asyncState);
        }
        
        private object[] OnEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompleted(object state) {
            if ((this.getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompleted(this, new getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDAsync(string SessionID, int privateRequirementID) {
            this.getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDAsync(SessionID, privateRequirementID, null);
        }
        
        public void getCategoryAndPrivateRequirementRelationsByPrivateRequirementIDAsync(string SessionID, int privateRequirementID, object userState) {
            if ((this.onBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate == null)) {
                this.onBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate = new BeginOperationDelegate(this.OnBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID);
            }
            if ((this.onEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate == null)) {
                this.onEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate = new EndOperationDelegate(this.OnEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID);
            }
            if ((this.ongetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedDelegate == null)) {
                this.ongetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompleted);
            }
            base.InvokeAsync(this.onBegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate, new object[] {
                        SessionID,
                        privateRequirementID}, this.onEndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDDelegate, this.ongetCategoryAndPrivateRequirementRelationsByPrivateRequirementIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetAllData(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAllData(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements myRequirements.ServiceReference1.WebService.EndgetAllData(System.IAsyncResult result) {
            return base.Channel.EndgetAllData(result);
        }
        
        private System.IAsyncResult OnBegingetAllData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetAllData(SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetAllData(System.IAsyncResult result) {
            myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetAllData(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAllDataCompleted(object state) {
            if ((this.getAllDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllDataCompleted(this, new getAllDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllDataAsync(string SessionID) {
            this.getAllDataAsync(SessionID, null);
        }
        
        public void getAllDataAsync(string SessionID, object userState) {
            if ((this.onBegingetAllDataDelegate == null)) {
                this.onBegingetAllDataDelegate = new BeginOperationDelegate(this.OnBegingetAllData);
            }
            if ((this.onEndgetAllDataDelegate == null)) {
                this.onEndgetAllDataDelegate = new EndOperationDelegate(this.OnEndgetAllData);
            }
            if ((this.ongetAllDataCompletedDelegate == null)) {
                this.ongetAllDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllDataCompleted);
            }
            base.InvokeAsync(this.onBegingetAllDataDelegate, new object[] {
                        SessionID}, this.onEndgetAllDataDelegate, this.ongetAllDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginGetAllProjects(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllProjects(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> myRequirements.ServiceReference1.WebService.EndGetAllProjects(System.IAsyncResult result) {
            return base.Channel.EndGetAllProjects(result);
        }
        
        private System.IAsyncResult OnBeginGetAllProjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginGetAllProjects(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllProjects(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndGetAllProjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllProjectsCompleted(object state) {
            if ((this.GetAllProjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllProjectsCompleted(this, new GetAllProjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllProjectsAsync(string SessionID) {
            this.GetAllProjectsAsync(SessionID, null);
        }
        
        public void GetAllProjectsAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllProjectsDelegate == null)) {
                this.onBeginGetAllProjectsDelegate = new BeginOperationDelegate(this.OnBeginGetAllProjects);
            }
            if ((this.onEndGetAllProjectsDelegate == null)) {
                this.onEndGetAllProjectsDelegate = new EndOperationDelegate(this.OnEndGetAllProjects);
            }
            if ((this.onGetAllProjectsCompletedDelegate == null)) {
                this.onGetAllProjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllProjectsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllProjectsDelegate, new object[] {
                        SessionID}, this.onEndGetAllProjectsDelegate, this.onGetAllProjectsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewProject(SessionID, project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewProject(System.IAsyncResult result) {
            return base.Channel.EndCreateNewProject(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Project project = ((myRequirements.ServiceReference1.Project)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewProject(SessionID, project, callback, asyncState);
        }
        
        private object[] OnEndCreateNewProject(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewProjectCompleted(object state) {
            if ((this.CreateNewProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewProjectCompleted(this, new CreateNewProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewProjectAsync(string SessionID, myRequirements.ServiceReference1.Project project) {
            this.CreateNewProjectAsync(SessionID, project, null);
        }
        
        public void CreateNewProjectAsync(string SessionID, myRequirements.ServiceReference1.Project project, object userState) {
            if ((this.onBeginCreateNewProjectDelegate == null)) {
                this.onBeginCreateNewProjectDelegate = new BeginOperationDelegate(this.OnBeginCreateNewProject);
            }
            if ((this.onEndCreateNewProjectDelegate == null)) {
                this.onEndCreateNewProjectDelegate = new EndOperationDelegate(this.OnEndCreateNewProject);
            }
            if ((this.onCreateNewProjectCompletedDelegate == null)) {
                this.onCreateNewProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewProjectCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewProjectDelegate, new object[] {
                        SessionID,
                        project}, this.onEndCreateNewProjectDelegate, this.onCreateNewProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdateProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateProject(SessionID, project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdateProject(System.IAsyncResult result) {
            return base.Channel.EndUpdateProject(result);
        }
        
        private System.IAsyncResult OnBeginUpdateProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.Project project = ((myRequirements.ServiceReference1.Project)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdateProject(SessionID, project, callback, asyncState);
        }
        
        private object[] OnEndUpdateProject(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdateProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateProjectCompleted(object state) {
            if ((this.UpdateProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateProjectCompleted(this, new UpdateProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateProjectAsync(string SessionID, myRequirements.ServiceReference1.Project project) {
            this.UpdateProjectAsync(SessionID, project, null);
        }
        
        public void UpdateProjectAsync(string SessionID, myRequirements.ServiceReference1.Project project, object userState) {
            if ((this.onBeginUpdateProjectDelegate == null)) {
                this.onBeginUpdateProjectDelegate = new BeginOperationDelegate(this.OnBeginUpdateProject);
            }
            if ((this.onEndUpdateProjectDelegate == null)) {
                this.onEndUpdateProjectDelegate = new EndOperationDelegate(this.OnEndUpdateProject);
            }
            if ((this.onUpdateProjectCompletedDelegate == null)) {
                this.onUpdateProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateProjectCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateProjectDelegate, new object[] {
                        SessionID,
                        project}, this.onEndUpdateProjectDelegate, this.onUpdateProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeleteProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteProject(SessionID, projectID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeleteProject(System.IAsyncResult result) {
            return base.Channel.EndDeleteProject(result);
        }
        
        private System.IAsyncResult OnBeginDeleteProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int projectID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeleteProject(SessionID, projectID, callback, asyncState);
        }
        
        private object[] OnEndDeleteProject(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeleteProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteProjectCompleted(object state) {
            if ((this.DeleteProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteProjectAsync(string SessionID, int projectID) {
            this.DeleteProjectAsync(SessionID, projectID, null);
        }
        
        public void DeleteProjectAsync(string SessionID, int projectID, object userState) {
            if ((this.onBeginDeleteProjectDelegate == null)) {
                this.onBeginDeleteProjectDelegate = new BeginOperationDelegate(this.OnBeginDeleteProject);
            }
            if ((this.onEndDeleteProjectDelegate == null)) {
                this.onEndDeleteProjectDelegate = new EndOperationDelegate(this.OnEndDeleteProject);
            }
            if ((this.onDeleteProjectCompletedDelegate == null)) {
                this.onDeleteProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteProjectCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteProjectDelegate, new object[] {
                        SessionID,
                        projectID}, this.onEndDeleteProjectDelegate, this.onDeleteProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginSetActiveProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetActiveProject(SessionID, projectID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndSetActiveProject(System.IAsyncResult result) {
            return base.Channel.EndSetActiveProject(result);
        }
        
        private System.IAsyncResult OnBeginSetActiveProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int projectID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginSetActiveProject(SessionID, projectID, callback, asyncState);
        }
        
        private object[] OnEndSetActiveProject(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndSetActiveProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetActiveProjectCompleted(object state) {
            if ((this.SetActiveProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetActiveProjectCompleted(this, new SetActiveProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetActiveProjectAsync(string SessionID, int projectID) {
            this.SetActiveProjectAsync(SessionID, projectID, null);
        }
        
        public void SetActiveProjectAsync(string SessionID, int projectID, object userState) {
            if ((this.onBeginSetActiveProjectDelegate == null)) {
                this.onBeginSetActiveProjectDelegate = new BeginOperationDelegate(this.OnBeginSetActiveProject);
            }
            if ((this.onEndSetActiveProjectDelegate == null)) {
                this.onEndSetActiveProjectDelegate = new EndOperationDelegate(this.OnEndSetActiveProject);
            }
            if ((this.onSetActiveProjectCompletedDelegate == null)) {
                this.onSetActiveProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetActiveProjectCompleted);
            }
            base.InvokeAsync(this.onBeginSetActiveProjectDelegate, new object[] {
                        SessionID,
                        projectID}, this.onEndSetActiveProjectDelegate, this.onSetActiveProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegintoggleActivePrivateRequirement(string SessionID, int ProjectID, int PrivateRequirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintoggleActivePrivateRequirement(SessionID, ProjectID, PrivateRequirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndtoggleActivePrivateRequirement(System.IAsyncResult result) {
            return base.Channel.EndtoggleActivePrivateRequirement(result);
        }
        
        private System.IAsyncResult OnBegintoggleActivePrivateRequirement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int ProjectID = ((int)(inValues[1]));
            int PrivateRequirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegintoggleActivePrivateRequirement(SessionID, ProjectID, PrivateRequirementID, callback, asyncState);
        }
        
        private object[] OnEndtoggleActivePrivateRequirement(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndtoggleActivePrivateRequirement(result);
            return new object[] {
                    retVal};
        }
        
        private void OntoggleActivePrivateRequirementCompleted(object state) {
            if ((this.toggleActivePrivateRequirementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.toggleActivePrivateRequirementCompleted(this, new toggleActivePrivateRequirementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void toggleActivePrivateRequirementAsync(string SessionID, int ProjectID, int PrivateRequirementID) {
            this.toggleActivePrivateRequirementAsync(SessionID, ProjectID, PrivateRequirementID, null);
        }
        
        public void toggleActivePrivateRequirementAsync(string SessionID, int ProjectID, int PrivateRequirementID, object userState) {
            if ((this.onBegintoggleActivePrivateRequirementDelegate == null)) {
                this.onBegintoggleActivePrivateRequirementDelegate = new BeginOperationDelegate(this.OnBegintoggleActivePrivateRequirement);
            }
            if ((this.onEndtoggleActivePrivateRequirementDelegate == null)) {
                this.onEndtoggleActivePrivateRequirementDelegate = new EndOperationDelegate(this.OnEndtoggleActivePrivateRequirement);
            }
            if ((this.ontoggleActivePrivateRequirementCompletedDelegate == null)) {
                this.ontoggleActivePrivateRequirementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntoggleActivePrivateRequirementCompleted);
            }
            base.InvokeAsync(this.onBegintoggleActivePrivateRequirementDelegate, new object[] {
                        SessionID,
                        ProjectID,
                        PrivateRequirementID}, this.onEndtoggleActivePrivateRequirementDelegate, this.ontoggleActivePrivateRequirementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegintoggleActiveRequirement(string SessionID, int ProjectID, int RequirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintoggleActiveRequirement(SessionID, ProjectID, RequirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndtoggleActiveRequirement(System.IAsyncResult result) {
            return base.Channel.EndtoggleActiveRequirement(result);
        }
        
        private System.IAsyncResult OnBegintoggleActiveRequirement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int ProjectID = ((int)(inValues[1]));
            int RequirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegintoggleActiveRequirement(SessionID, ProjectID, RequirementID, callback, asyncState);
        }
        
        private object[] OnEndtoggleActiveRequirement(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndtoggleActiveRequirement(result);
            return new object[] {
                    retVal};
        }
        
        private void OntoggleActiveRequirementCompleted(object state) {
            if ((this.toggleActiveRequirementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.toggleActiveRequirementCompleted(this, new toggleActiveRequirementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void toggleActiveRequirementAsync(string SessionID, int ProjectID, int RequirementID) {
            this.toggleActiveRequirementAsync(SessionID, ProjectID, RequirementID, null);
        }
        
        public void toggleActiveRequirementAsync(string SessionID, int ProjectID, int RequirementID, object userState) {
            if ((this.onBegintoggleActiveRequirementDelegate == null)) {
                this.onBegintoggleActiveRequirementDelegate = new BeginOperationDelegate(this.OnBegintoggleActiveRequirement);
            }
            if ((this.onEndtoggleActiveRequirementDelegate == null)) {
                this.onEndtoggleActiveRequirementDelegate = new EndOperationDelegate(this.OnEndtoggleActiveRequirement);
            }
            if ((this.ontoggleActiveRequirementCompletedDelegate == null)) {
                this.ontoggleActiveRequirementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntoggleActiveRequirementCompleted);
            }
            base.InvokeAsync(this.onBegintoggleActiveRequirementDelegate, new object[] {
                        SessionID,
                        ProjectID,
                        RequirementID}, this.onEndtoggleActiveRequirementDelegate, this.ontoggleActiveRequirementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegingetStatisticsByProjectID(string SessionID, int ProjectID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetStatisticsByProjectID(SessionID, ProjectID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        myRequirements.ServiceReference1.Statistic myRequirements.ServiceReference1.WebService.EndgetStatisticsByProjectID(System.IAsyncResult result) {
            return base.Channel.EndgetStatisticsByProjectID(result);
        }
        
        private System.IAsyncResult OnBegingetStatisticsByProjectID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int ProjectID = ((int)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegingetStatisticsByProjectID(SessionID, ProjectID, callback, asyncState);
        }
        
        private object[] OnEndgetStatisticsByProjectID(System.IAsyncResult result) {
            myRequirements.ServiceReference1.Statistic retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndgetStatisticsByProjectID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetStatisticsByProjectIDCompleted(object state) {
            if ((this.getStatisticsByProjectIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getStatisticsByProjectIDCompleted(this, new getStatisticsByProjectIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getStatisticsByProjectIDAsync(string SessionID, int ProjectID) {
            this.getStatisticsByProjectIDAsync(SessionID, ProjectID, null);
        }
        
        public void getStatisticsByProjectIDAsync(string SessionID, int ProjectID, object userState) {
            if ((this.onBegingetStatisticsByProjectIDDelegate == null)) {
                this.onBegingetStatisticsByProjectIDDelegate = new BeginOperationDelegate(this.OnBegingetStatisticsByProjectID);
            }
            if ((this.onEndgetStatisticsByProjectIDDelegate == null)) {
                this.onEndgetStatisticsByProjectIDDelegate = new EndOperationDelegate(this.OnEndgetStatisticsByProjectID);
            }
            if ((this.ongetStatisticsByProjectIDCompletedDelegate == null)) {
                this.ongetStatisticsByProjectIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetStatisticsByProjectIDCompleted);
            }
            base.InvokeAsync(this.onBegingetStatisticsByProjectIDDelegate, new object[] {
                        SessionID,
                        ProjectID}, this.onEndgetStatisticsByProjectIDDelegate, this.ongetStatisticsByProjectIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginGetAllPSRP(string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPSRP(SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> myRequirements.ServiceReference1.WebService.EndGetAllPSRP(System.IAsyncResult result) {
            return base.Channel.EndGetAllPSRP(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginGetAllPSRP(SessionID, callback, asyncState);
        }
        
        private object[] OnEndGetAllPSRP(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndGetAllPSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPSRPCompleted(object state) {
            if ((this.GetAllPSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPSRPCompleted(this, new GetAllPSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPSRPAsync(string SessionID) {
            this.GetAllPSRPAsync(SessionID, null);
        }
        
        public void GetAllPSRPAsync(string SessionID, object userState) {
            if ((this.onBeginGetAllPSRPDelegate == null)) {
                this.onBeginGetAllPSRPDelegate = new BeginOperationDelegate(this.OnBeginGetAllPSRP);
            }
            if ((this.onEndGetAllPSRPDelegate == null)) {
                this.onEndGetAllPSRPDelegate = new EndOperationDelegate(this.OnEndGetAllPSRP);
            }
            if ((this.onGetAllPSRPCompletedDelegate == null)) {
                this.onGetAllPSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPSRPCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPSRPDelegate, new object[] {
                        SessionID}, this.onEndGetAllPSRPDelegate, this.onGetAllPSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginCreateNewPSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, int projectID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewPSRP(SessionID, srp, projectID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndCreateNewPSRP(System.IAsyncResult result) {
            return base.Channel.EndCreateNewPSRP(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewPSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.PrivateRequirement srp = ((myRequirements.ServiceReference1.PrivateRequirement)(inValues[1]));
            int projectID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginCreateNewPSRP(SessionID, srp, projectID, callback, asyncState);
        }
        
        private object[] OnEndCreateNewPSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndCreateNewPSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewPSRPCompleted(object state) {
            if ((this.CreateNewPSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewPSRPCompleted(this, new CreateNewPSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewPSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, int projectID) {
            this.CreateNewPSRPAsync(SessionID, srp, projectID, null);
        }
        
        public void CreateNewPSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, int projectID, object userState) {
            if ((this.onBeginCreateNewPSRPDelegate == null)) {
                this.onBeginCreateNewPSRPDelegate = new BeginOperationDelegate(this.OnBeginCreateNewPSRP);
            }
            if ((this.onEndCreateNewPSRPDelegate == null)) {
                this.onEndCreateNewPSRPDelegate = new EndOperationDelegate(this.OnEndCreateNewPSRP);
            }
            if ((this.onCreateNewPSRPCompletedDelegate == null)) {
                this.onCreateNewPSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewPSRPCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewPSRPDelegate, new object[] {
                        SessionID,
                        srp,
                        projectID}, this.onEndCreateNewPSRPDelegate, this.onCreateNewPSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginUpdatePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePSRP(SessionID, req, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndUpdatePSRP(System.IAsyncResult result) {
            return base.Channel.EndUpdatePSRP(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req = ((myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginUpdatePSRP(SessionID, req, callback, asyncState);
        }
        
        private object[] OnEndUpdatePSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndUpdatePSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdatePSRPCompleted(object state) {
            if ((this.UpdatePSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePSRPCompleted(this, new UpdatePSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req) {
            this.UpdatePSRPAsync(SessionID, req, null);
        }
        
        public void UpdatePSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req, object userState) {
            if ((this.onBeginUpdatePSRPDelegate == null)) {
                this.onBeginUpdatePSRPDelegate = new BeginOperationDelegate(this.OnBeginUpdatePSRP);
            }
            if ((this.onEndUpdatePSRPDelegate == null)) {
                this.onEndUpdatePSRPDelegate = new EndOperationDelegate(this.OnEndUpdatePSRP);
            }
            if ((this.onUpdatePSRPCompletedDelegate == null)) {
                this.onUpdatePSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePSRPCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePSRPDelegate, new object[] {
                        SessionID,
                        req}, this.onEndUpdatePSRPDelegate, this.onUpdatePSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BeginDeletePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePSRP(SessionID, srp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndDeletePSRP(System.IAsyncResult result) {
            return base.Channel.EndDeletePSRP(result);
        }
        
        private System.IAsyncResult OnBeginDeletePSRP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            myRequirements.ServiceReference1.PrivateRequirement srp = ((myRequirements.ServiceReference1.PrivateRequirement)(inValues[1]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BeginDeletePSRP(SessionID, srp, callback, asyncState);
        }
        
        private object[] OnEndDeletePSRP(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndDeletePSRP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeletePSRPCompleted(object state) {
            if ((this.DeletePSRPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePSRPCompleted(this, new DeletePSRPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp) {
            this.DeletePSRPAsync(SessionID, srp, null);
        }
        
        public void DeletePSRPAsync(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, object userState) {
            if ((this.onBeginDeletePSRPDelegate == null)) {
                this.onBeginDeletePSRPDelegate = new BeginOperationDelegate(this.OnBeginDeletePSRP);
            }
            if ((this.onEndDeletePSRPDelegate == null)) {
                this.onEndDeletePSRPDelegate = new EndOperationDelegate(this.OnEndDeletePSRP);
            }
            if ((this.onDeletePSRPCompletedDelegate == null)) {
                this.onDeletePSRPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePSRPCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePSRPDelegate, new object[] {
                        SessionID,
                        srp}, this.onEndDeletePSRPDelegate, this.onDeletePSRPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult myRequirements.ServiceReference1.WebService.BegincreatePrivateRequirementByRequirementID(string SessionID, int requirementID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreatePrivateRequirementByRequirementID(SessionID, requirementID, privateRequirementID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string myRequirements.ServiceReference1.WebService.EndcreatePrivateRequirementByRequirementID(System.IAsyncResult result) {
            return base.Channel.EndcreatePrivateRequirementByRequirementID(result);
        }
        
        private System.IAsyncResult OnBegincreatePrivateRequirementByRequirementID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SessionID = ((string)(inValues[0]));
            int requirementID = ((int)(inValues[1]));
            int privateRequirementID = ((int)(inValues[2]));
            return ((myRequirements.ServiceReference1.WebService)(this)).BegincreatePrivateRequirementByRequirementID(SessionID, requirementID, privateRequirementID, callback, asyncState);
        }
        
        private object[] OnEndcreatePrivateRequirementByRequirementID(System.IAsyncResult result) {
            string retVal = ((myRequirements.ServiceReference1.WebService)(this)).EndcreatePrivateRequirementByRequirementID(result);
            return new object[] {
                    retVal};
        }
        
        private void OncreatePrivateRequirementByRequirementIDCompleted(object state) {
            if ((this.createPrivateRequirementByRequirementIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createPrivateRequirementByRequirementIDCompleted(this, new createPrivateRequirementByRequirementIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createPrivateRequirementByRequirementIDAsync(string SessionID, int requirementID, int privateRequirementID) {
            this.createPrivateRequirementByRequirementIDAsync(SessionID, requirementID, privateRequirementID, null);
        }
        
        public void createPrivateRequirementByRequirementIDAsync(string SessionID, int requirementID, int privateRequirementID, object userState) {
            if ((this.onBegincreatePrivateRequirementByRequirementIDDelegate == null)) {
                this.onBegincreatePrivateRequirementByRequirementIDDelegate = new BeginOperationDelegate(this.OnBegincreatePrivateRequirementByRequirementID);
            }
            if ((this.onEndcreatePrivateRequirementByRequirementIDDelegate == null)) {
                this.onEndcreatePrivateRequirementByRequirementIDDelegate = new EndOperationDelegate(this.OnEndcreatePrivateRequirementByRequirementID);
            }
            if ((this.oncreatePrivateRequirementByRequirementIDCompletedDelegate == null)) {
                this.oncreatePrivateRequirementByRequirementIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreatePrivateRequirementByRequirementIDCompleted);
            }
            base.InvokeAsync(this.onBegincreatePrivateRequirementByRequirementIDDelegate, new object[] {
                        SessionID,
                        requirementID,
                        privateRequirementID}, this.onEndcreatePrivateRequirementByRequirementIDDelegate, this.oncreatePrivateRequirementByRequirementIDCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override myRequirements.ServiceReference1.WebService CreateChannel() {
            return new WebServiceClientChannel(this);
        }
        
        private class WebServiceClientChannel : ChannelBase<myRequirements.ServiceReference1.WebService>, myRequirements.ServiceReference1.WebService {
            
            public WebServiceClientChannel(System.ServiceModel.ClientBase<myRequirements.ServiceReference1.WebService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public string EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewUser(myRequirements.ServiceReference1.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecoverLostPasswordByEmail(string address, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = address;
                System.IAsyncResult _result = base.BeginInvoke("RecoverLostPasswordByEmail", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRecoverLostPasswordByEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RecoverLostPasswordByEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetAllUsers(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("getAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> EndgetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User>)(base.EndInvoke("getAllUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOverrideLoginAs(string SessionID, int userid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = userid;
                System.IAsyncResult _result = base.BeginInvoke("OverrideLoginAs", _args, callback, asyncState);
                return _result;
            }
            
            public string EndOverrideLoginAs(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("OverrideLoginAs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUsers(string SessionID, System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.User> uUsers, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = uUsers;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUsers", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(string SessionID, int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = userID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCurrentUserInformation(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("getCurrentUserInformation", _args, callback, asyncState);
                return _result;
            }
            
            public myRequirements.ServiceReference1.User EndgetCurrentUserInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                myRequirements.ServiceReference1.User _result = ((myRequirements.ServiceReference1.User)(base.EndInvoke("getCurrentUserInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllSRP(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllSRP", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> EndGetAllSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples>)(base.EndInvoke("GetAllSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = srp;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateSRP(string SessionID, myRequirements.ServiceReference1.Requirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = req;
                System.IAsyncResult _result = base.BeginInvoke("UpdateSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteSRP(string SessionID, myRequirements.ServiceReference1.Requirement srp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = srp;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllSDP(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllSDP", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> EndGetAllSDP(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Pattern_RequirementAndCategories>)(base.EndInvoke("GetAllSDP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = sdp;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewSDP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewSDP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewSDP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateSDP(string SessionID, myRequirements.ServiceReference1.Pattern_RequirementAndCategories pat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = pat;
                System.IAsyncResult _result = base.BeginInvoke("UpdateSDP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateSDP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateSDP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteSDP(string SessionID, myRequirements.ServiceReference1.Pattern sdp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = sdp;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSDP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteSDP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteSDP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllCategories(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllCategories", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> EndGetAllCategories(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Categories_RequirementsAndPatterns>)(base.EndInvoke("GetAllCategories", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = categorie;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewCategorie", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewCategorie(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewCategorie", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCategorie(string SessionID, myRequirements.ServiceReference1.Categories_RequirementsAndPatterns catRel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = catRel;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCategorie", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateCategorie(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateCategorie", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCategorie(string SessionID, myRequirements.ServiceReference1.Categorie categorie, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = categorie;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCategorie", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteCategorie(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteCategorie", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddPatternAndRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = reqID;
                _args[2] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("addPatternAndRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddPatternAndRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addPatternAndRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddPatternAndPrivateRequirementRelation(string SessionID, int reqID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = reqID;
                _args[2] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("addPatternAndPrivateRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddPatternAndPrivateRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addPatternAndPrivateRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremovePatternandRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = patternID;
                _args[2] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("removePatternandRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremovePatternandRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removePatternandRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremovePatternandPrivateRequirementRelation(string SessionID, int patternID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = patternID;
                _args[2] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("removePatternandPrivateRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremovePatternandPrivateRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removePatternandPrivateRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddCategoryAndRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = reqID;
                _args[2] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("addCategoryAndRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddCategoryAndRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addCategoryAndRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddCategoryAndPrivateRequirementRelation(string SessionID, int reqID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = reqID;
                _args[2] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("addCategoryAndPrivateRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addCategoryAndPrivateRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremoveCategoryAndRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = categoryID;
                _args[2] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("removeCategoryAndRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremoveCategoryAndRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removeCategoryAndRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremoveCategoryAndPrivateRequirementRelation(string SessionID, int categoryID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = categoryID;
                _args[2] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("removeCategoryAndPrivateRequirementRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremoveCategoryAndPrivateRequirementRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removeCategoryAndPrivateRequirementRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddNewRequirementExampleByRequirmentID(string SessionID, int reqID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = reqID;
                System.IAsyncResult _result = base.BeginInvoke("addNewRequirementExampleByRequirmentID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddNewRequirementExampleByRequirmentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addNewRequirementExampleByRequirmentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremoveRequirementExampleByRequirementID(string SessionID, int requirementID, int exampleID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = requirementID;
                _args[2] = exampleID;
                System.IAsyncResult _result = base.BeginInvoke("removeRequirementExampleByRequirementID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremoveRequirementExampleByRequirementID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removeRequirementExampleByRequirementID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddCategoryAndDesignRelation(string SessionID, int patID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = patID;
                _args[2] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("addCategoryAndDesignRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndaddCategoryAndDesignRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("addCategoryAndDesignRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginremoveCategoryAndPatternRelation(string SessionID, int categoryID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = categoryID;
                _args[2] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("removeCategoryAndPatternRelation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndremoveCategoryAndPatternRelation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("removeCategoryAndPatternRelation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndRequirementRelationsBycategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndRequirementRelationsBycategoryID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> EndgetCategoryAndRequirementRelationsBycategoryID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement>)(base.EndInvoke("getCategoryAndRequirementRelationsBycategoryID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndRequirementRelationsByRequirementID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> EndgetCategoryAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategorieRequirement>)(base.EndInvoke("getCategoryAndRequirementRelationsByRequirementID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndPattnerRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndPattnerRelationsByCategoryID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> EndgetCategoryAndPattnerRelationsByCategoryID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern>)(base.EndInvoke("getCategoryAndPattnerRelationsByCategoryID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndPattnerRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndPattnerRelationsByPatternID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> EndgetCategoryAndPattnerRelationsByPatternID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePattern>)(base.EndInvoke("getCategoryAndPattnerRelationsByPatternID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPatternAndRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("getPatternAndRequirementRelationsByPatternID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> EndgetPatternAndRequirementRelationsByPatternID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement>)(base.EndInvoke("getPatternAndRequirementRelationsByPatternID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPatternAndRequirementRelationsByRequirementID(string SessionID, int requirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = requirementID;
                System.IAsyncResult _result = base.BeginInvoke("getPatternAndRequirementRelationsByRequirementID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> EndgetPatternAndRequirementRelationsByRequirementID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternRequirement>)(base.EndInvoke("getPatternAndRequirementRelationsByRequirementID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPatternAndPrivateRequirementRelationsByPatternID(string SessionID, int patternID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = patternID;
                System.IAsyncResult _result = base.BeginInvoke("getPatternAndPrivateRequirementRelationsByPatternID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> EndgetPatternAndPrivateRequirementRelationsByPatternID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement>)(base.EndInvoke("getPatternAndPrivateRequirementRelationsByPatternID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = privateRequirementID;
                System.IAsyncResult _result = base.BeginInvoke("getPatternAndPrivateRequirementRelationsByPrivateRequirmentID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> EndgetPatternAndPrivateRequirementRelationsByPrivateRequirmentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationPatternPrivateRequirement>)(base.EndInvoke("getPatternAndPrivateRequirementRelationsByPrivateRequirmentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndPrivateRequirementRelationsByCategoryID(string SessionID, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndPrivateRequirementRelationsByCategoryID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> EndgetCategoryAndPrivateRequirementRelationsByCategoryID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement>)(base.EndInvoke("getCategoryAndPrivateRequirementRelationsByCategoryID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(string SessionID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = privateRequirementID;
                System.IAsyncResult _result = base.BeginInvoke("getCategoryAndPrivateRequirementRelationsByPrivateRequirementID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> EndgetCategoryAndPrivateRequirementRelationsByPrivateRequirementID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.RelationCategoriePrivateSecurityRequirement>)(base.EndInvoke("getCategoryAndPrivateRequirementRelationsByPrivateRequirementID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetAllData(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("getAllData", _args, callback, asyncState);
                return _result;
            }
            
            public myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements EndgetAllData(System.IAsyncResult result) {
                object[] _args = new object[0];
                myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements _result = ((myRequirements.ServiceReference1.RequirementsAndPatternsAndCategoriesAndPrivRequirements)(base.EndInvoke("getAllData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllProjects(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllProjects", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> EndGetAllProjects(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.Project>)(base.EndInvoke("GetAllProjects", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = project;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewProject", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateProject(string SessionID, myRequirements.ServiceReference1.Project project, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = project;
                System.IAsyncResult _result = base.BeginInvoke("UpdateProject", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = projectID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteProject", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetActiveProject(string SessionID, int projectID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = projectID;
                System.IAsyncResult _result = base.BeginInvoke("SetActiveProject", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSetActiveProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SetActiveProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegintoggleActivePrivateRequirement(string SessionID, int ProjectID, int PrivateRequirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = ProjectID;
                _args[2] = PrivateRequirementID;
                System.IAsyncResult _result = base.BeginInvoke("toggleActivePrivateRequirement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndtoggleActivePrivateRequirement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("toggleActivePrivateRequirement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegintoggleActiveRequirement(string SessionID, int ProjectID, int RequirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = ProjectID;
                _args[2] = RequirementID;
                System.IAsyncResult _result = base.BeginInvoke("toggleActiveRequirement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndtoggleActiveRequirement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("toggleActiveRequirement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetStatisticsByProjectID(string SessionID, int ProjectID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = ProjectID;
                System.IAsyncResult _result = base.BeginInvoke("getStatisticsByProjectID", _args, callback, asyncState);
                return _result;
            }
            
            public myRequirements.ServiceReference1.Statistic EndgetStatisticsByProjectID(System.IAsyncResult result) {
                object[] _args = new object[0];
                myRequirements.ServiceReference1.Statistic _result = ((myRequirements.ServiceReference1.Statistic)(base.EndInvoke("getStatisticsByProjectID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllPSRP(string SessionID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = SessionID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllPSRP", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> EndGetAllPSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples> _result = ((System.Collections.ObjectModel.ObservableCollection<myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples>)(base.EndInvoke("GetAllPSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewPSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, int projectID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = srp;
                _args[2] = projectID;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewPSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewPSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewPSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdatePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirment_PatternsAndCategoriesAndExamples req, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = req;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdatePSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdatePSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeletePSRP(string SessionID, myRequirements.ServiceReference1.PrivateRequirement srp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SessionID;
                _args[1] = srp;
                System.IAsyncResult _result = base.BeginInvoke("DeletePSRP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeletePSRP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeletePSRP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegincreatePrivateRequirementByRequirementID(string SessionID, int requirementID, int privateRequirementID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SessionID;
                _args[1] = requirementID;
                _args[2] = privateRequirementID;
                System.IAsyncResult _result = base.BeginInvoke("createPrivateRequirementByRequirementID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndcreatePrivateRequirementByRequirementID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("createPrivateRequirementByRequirementID", _args, result)));
                return _result;
            }
        }
    }
}
